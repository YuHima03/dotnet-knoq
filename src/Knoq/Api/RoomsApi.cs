/*
 * traP knoQ
 *
 * This is a sample knoQ server. 
 *
 * The version of the OpenAPI document: 2.1.5
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using Knoq.Client;
using Knoq.Model;

namespace Knoq.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRoomsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// traPで確保した部屋の情報追加
        /// </summary>
        /// <remarks>
        /// 特権が必要。
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addAllRoomsRequestInner">進捗部屋情報</param>
        /// <returns>List&lt;ResponseRoom&gt;</returns>
        List<ResponseRoom> AddAllRooms(List<AddAllRoomsRequestInner> addAllRoomsRequestInner);

        /// <summary>
        /// traPで確保した部屋の情報追加
        /// </summary>
        /// <remarks>
        /// 特権が必要。
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addAllRoomsRequestInner">進捗部屋情報</param>
        /// <returns>ApiResponse of List&lt;ResponseRoom&gt;</returns>
        ApiResponse<List<ResponseRoom>> AddAllRoomsWithHttpInfo(List<AddAllRoomsRequestInner> addAllRoomsRequestInner);
        /// <summary>
        /// 部屋の情報追加
        /// </summary>
        /// <remarks>
        /// 部屋の情報追加
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestRoom">部屋の追加</param>
        /// <returns>ResponseRoom</returns>
        ResponseRoom AddRooms(RequestRoom requestRoom);

        /// <summary>
        /// 部屋の情報追加
        /// </summary>
        /// <remarks>
        /// 部屋の情報追加
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestRoom">部屋の追加</param>
        /// <returns>ApiResponse of ResponseRoom</returns>
        ApiResponse<ResponseRoom> AddRoomsWithHttpInfo(RequestRoom requestRoom);
        /// <summary>
        /// 部屋の情報を削除
        /// </summary>
        /// <remarks>
        /// (関連する予約を削除する) エラーを出して削除を促す予定
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roomID"></param>
        /// <param name="excludeEventID">除外するイベントのID。 (optional)</param>
        /// <returns></returns>
        void DeleteRoom(Guid roomID, Guid? excludeEventID = default);

        /// <summary>
        /// 部屋の情報を削除
        /// </summary>
        /// <remarks>
        /// (関連する予約を削除する) エラーを出して削除を促す予定
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roomID"></param>
        /// <param name="excludeEventID">除外するイベントのID。 (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteRoomWithHttpInfo(Guid roomID, Guid? excludeEventID = default);
        /// <summary>
        /// 一件取得する
        /// </summary>
        /// <remarks>
        /// 一件取得する
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roomID"></param>
        /// <param name="excludeEventID">除外するイベントのID。 (optional)</param>
        /// <returns>ResponseRoom</returns>
        ResponseRoom GetRoom(Guid roomID, Guid? excludeEventID = default);

        /// <summary>
        /// 一件取得する
        /// </summary>
        /// <remarks>
        /// 一件取得する
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roomID"></param>
        /// <param name="excludeEventID">除外するイベントのID。 (optional)</param>
        /// <returns>ApiResponse of ResponseRoom</returns>
        ApiResponse<ResponseRoom> GetRoomWithHttpInfo(Guid roomID, Guid? excludeEventID = default);
        /// <summary>
        /// 進捗部屋の情報を取得
        /// </summary>
        /// <remarks>
        /// 進捗部屋の情報を取得
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateBegin">特定の日時から。 (optional)</param>
        /// <param name="dateEnd">特定の日時まで。 (optional)</param>
        /// <param name="excludeEventID">除外するイベントのID。 (optional)</param>
        /// <returns>List&lt;ResponseRoom&gt;</returns>
        List<ResponseRoom> GetRooms(string? dateBegin = default, string? dateEnd = default, Guid? excludeEventID = default);

        /// <summary>
        /// 進捗部屋の情報を取得
        /// </summary>
        /// <remarks>
        /// 進捗部屋の情報を取得
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateBegin">特定の日時から。 (optional)</param>
        /// <param name="dateEnd">特定の日時まで。 (optional)</param>
        /// <param name="excludeEventID">除外するイベントのID。 (optional)</param>
        /// <returns>ApiResponse of List&lt;ResponseRoom&gt;</returns>
        ApiResponse<List<ResponseRoom>> GetRoomsWithHttpInfo(string? dateBegin = default, string? dateEnd = default, Guid? excludeEventID = default);
        /// <summary>
        /// 部屋を未確認にする
        /// </summary>
        /// <remarks>
        /// 特権が必要。部屋が使用できることの確認を取り消す。
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roomID"></param>
        /// <returns></returns>
        void UnverifyRoom(Guid roomID);

        /// <summary>
        /// 部屋を未確認にする
        /// </summary>
        /// <remarks>
        /// 特権が必要。部屋が使用できることの確認を取り消す。
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roomID"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UnverifyRoomWithHttpInfo(Guid roomID);
        /// <summary>
        /// 部屋を確認する
        /// </summary>
        /// <remarks>
        /// 特権が必要。部屋が使用できることを確認する
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roomID"></param>
        /// <returns></returns>
        void VerifyRoom(Guid roomID);

        /// <summary>
        /// 部屋を確認する
        /// </summary>
        /// <remarks>
        /// 特権が必要。部屋が使用できることを確認する
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roomID"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> VerifyRoomWithHttpInfo(Guid roomID);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRoomsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// traPで確保した部屋の情報追加
        /// </summary>
        /// <remarks>
        /// 特権が必要。
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addAllRoomsRequestInner">進捗部屋情報</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ResponseRoom&gt;</returns>
        System.Threading.Tasks.Task<List<ResponseRoom>> AddAllRoomsAsync(List<AddAllRoomsRequestInner> addAllRoomsRequestInner, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// traPで確保した部屋の情報追加
        /// </summary>
        /// <remarks>
        /// 特権が必要。
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addAllRoomsRequestInner">進捗部屋情報</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ResponseRoom&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ResponseRoom>>> AddAllRoomsWithHttpInfoAsync(List<AddAllRoomsRequestInner> addAllRoomsRequestInner, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// 部屋の情報追加
        /// </summary>
        /// <remarks>
        /// 部屋の情報追加
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestRoom">部屋の追加</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResponseRoom</returns>
        System.Threading.Tasks.Task<ResponseRoom> AddRoomsAsync(RequestRoom requestRoom, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 部屋の情報追加
        /// </summary>
        /// <remarks>
        /// 部屋の情報追加
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestRoom">部屋の追加</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResponseRoom)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseRoom>> AddRoomsWithHttpInfoAsync(RequestRoom requestRoom, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// 部屋の情報を削除
        /// </summary>
        /// <remarks>
        /// (関連する予約を削除する) エラーを出して削除を促す予定
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roomID"></param>
        /// <param name="excludeEventID">除外するイベントのID。 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteRoomAsync(Guid roomID, Guid? excludeEventID = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 部屋の情報を削除
        /// </summary>
        /// <remarks>
        /// (関連する予約を削除する) エラーを出して削除を促す予定
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roomID"></param>
        /// <param name="excludeEventID">除外するイベントのID。 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteRoomWithHttpInfoAsync(Guid roomID, Guid? excludeEventID = default, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// 一件取得する
        /// </summary>
        /// <remarks>
        /// 一件取得する
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roomID"></param>
        /// <param name="excludeEventID">除外するイベントのID。 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResponseRoom</returns>
        System.Threading.Tasks.Task<ResponseRoom> GetRoomAsync(Guid roomID, Guid? excludeEventID = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 一件取得する
        /// </summary>
        /// <remarks>
        /// 一件取得する
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roomID"></param>
        /// <param name="excludeEventID">除外するイベントのID。 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResponseRoom)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseRoom>> GetRoomWithHttpInfoAsync(Guid roomID, Guid? excludeEventID = default, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// 進捗部屋の情報を取得
        /// </summary>
        /// <remarks>
        /// 進捗部屋の情報を取得
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateBegin">特定の日時から。 (optional)</param>
        /// <param name="dateEnd">特定の日時まで。 (optional)</param>
        /// <param name="excludeEventID">除外するイベントのID。 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ResponseRoom&gt;</returns>
        System.Threading.Tasks.Task<List<ResponseRoom>> GetRoomsAsync(string? dateBegin = default, string? dateEnd = default, Guid? excludeEventID = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 進捗部屋の情報を取得
        /// </summary>
        /// <remarks>
        /// 進捗部屋の情報を取得
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateBegin">特定の日時から。 (optional)</param>
        /// <param name="dateEnd">特定の日時まで。 (optional)</param>
        /// <param name="excludeEventID">除外するイベントのID。 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ResponseRoom&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ResponseRoom>>> GetRoomsWithHttpInfoAsync(string? dateBegin = default, string? dateEnd = default, Guid? excludeEventID = default, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// 部屋を未確認にする
        /// </summary>
        /// <remarks>
        /// 特権が必要。部屋が使用できることの確認を取り消す。
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roomID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UnverifyRoomAsync(Guid roomID, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 部屋を未確認にする
        /// </summary>
        /// <remarks>
        /// 特権が必要。部屋が使用できることの確認を取り消す。
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roomID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UnverifyRoomWithHttpInfoAsync(Guid roomID, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// 部屋を確認する
        /// </summary>
        /// <remarks>
        /// 特権が必要。部屋が使用できることを確認する
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roomID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task VerifyRoomAsync(Guid roomID, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 部屋を確認する
        /// </summary>
        /// <remarks>
        /// 特権が必要。部屋が使用できることを確認する
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roomID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> VerifyRoomWithHttpInfoAsync(Guid roomID, System.Threading.CancellationToken cancellationToken = default);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRoomsApi : IRoomsApiSync, IRoomsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RoomsApi : IDisposable, IRoomsApi
    {
        private Knoq.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RoomsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public RoomsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RoomsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public RoomsApi(string basePath)
        {
            this.Configuration = Knoq.Client.Configuration.MergeConfigurations(
                Knoq.Client.GlobalConfiguration.Instance,
                new Knoq.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Knoq.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Knoq.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RoomsApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public RoomsApi(Knoq.Client.Configuration configuration)
        {
            ArgumentNullException.ThrowIfNull(configuration);

            this.Configuration = Knoq.Client.Configuration.MergeConfigurations(
                Knoq.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Knoq.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Knoq.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RoomsApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public RoomsApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RoomsApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public RoomsApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            ArgumentNullException.ThrowIfNull(client);

            this.Configuration = Knoq.Client.Configuration.MergeConfigurations(
                Knoq.Client.GlobalConfiguration.Instance,
                new Knoq.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Knoq.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Knoq.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RoomsApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public RoomsApi(HttpClient client, Knoq.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            ArgumentNullException.ThrowIfNull(configuration);
            ArgumentNullException.ThrowIfNull(client);

            this.Configuration = Knoq.Client.Configuration.MergeConfigurations(
                Knoq.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Knoq.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Knoq.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RoomsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public RoomsApi(Knoq.Client.ISynchronousClient client, Knoq.Client.IAsynchronousClient asyncClient, Knoq.Client.IReadableConfiguration configuration)
        {
            this.Client = client ?? throw new ArgumentNullException(nameof(client));
            this.AsynchronousClient = asyncClient ?? throw new ArgumentNullException(nameof(asyncClient));
            this.Configuration = configuration ?? throw new ArgumentNullException(nameof(configuration));
            this.ExceptionFactory = Knoq.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public Knoq.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Knoq.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Knoq.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Knoq.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Knoq.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// traPで確保した部屋の情報追加 特権が必要。
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addAllRoomsRequestInner">進捗部屋情報</param>
        /// <returns>List&lt;ResponseRoom&gt;</returns>
        public List<ResponseRoom> AddAllRooms(List<AddAllRoomsRequestInner> addAllRoomsRequestInner)
        {
            Knoq.Client.ApiResponse<List<ResponseRoom>> localVarResponse = AddAllRoomsWithHttpInfo(addAllRoomsRequestInner);
            return localVarResponse.Data;
        }

        /// <summary>
        /// traPで確保した部屋の情報追加 特権が必要。
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addAllRoomsRequestInner">進捗部屋情報</param>
        /// <returns>ApiResponse of List&lt;ResponseRoom&gt;</returns>
        public Knoq.Client.ApiResponse<List<ResponseRoom>> AddAllRoomsWithHttpInfo(List<AddAllRoomsRequestInner> addAllRoomsRequestInner)
        {
            Knoq.Client.RequestOptions localVarRequestOptions = new();

            string[] _contentTypes = [
                "text/csv"
            ];

            // to determine the Accept header
            string[] _accepts = [
                "application/json"
            ];

            var localVarContentType = Knoq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Knoq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = addAllRoomsRequestInner ?? throw new Knoq.Client.ApiException(400, "Missing required parameter 'addAllRoomsRequestInner' when calling RoomsApi->AddAllRooms");


            // make the HTTP request
            var localVarResponse = this.Client.Post<List<ResponseRoom>>("/rooms/all", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddAllRooms", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// traPで確保した部屋の情報追加 特権が必要。
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addAllRoomsRequestInner">進捗部屋情報</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ResponseRoom&gt;</returns>
        public async System.Threading.Tasks.Task<List<ResponseRoom>> AddAllRoomsAsync(List<AddAllRoomsRequestInner> addAllRoomsRequestInner, System.Threading.CancellationToken cancellationToken = default)
        {
            Knoq.Client.ApiResponse<List<ResponseRoom>> localVarResponse = await AddAllRoomsWithHttpInfoAsync(addAllRoomsRequestInner, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// traPで確保した部屋の情報追加 特権が必要。
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addAllRoomsRequestInner">進捗部屋情報</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ResponseRoom&gt;)</returns>
        public async System.Threading.Tasks.Task<Knoq.Client.ApiResponse<List<ResponseRoom>>> AddAllRoomsWithHttpInfoAsync(List<AddAllRoomsRequestInner> addAllRoomsRequestInner, System.Threading.CancellationToken cancellationToken = default)
        {
            Knoq.Client.RequestOptions localVarRequestOptions = new();

            string[] _contentTypes = [
                "text/csv"
            ];

            // to determine the Accept header
            string[] _accepts = [
                "application/json"
            ];


            var localVarContentType = Knoq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Knoq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = addAllRoomsRequestInner ?? throw new Knoq.Client.ApiException(400, "Missing required parameter 'addAllRoomsRequestInner' when calling RoomsApi->AddAllRooms");


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<List<ResponseRoom>>("/rooms/all", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddAllRooms", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 部屋の情報追加 部屋の情報追加
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestRoom">部屋の追加</param>
        /// <returns>ResponseRoom</returns>
        public ResponseRoom AddRooms(RequestRoom requestRoom)
        {
            Knoq.Client.ApiResponse<ResponseRoom> localVarResponse = AddRoomsWithHttpInfo(requestRoom);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 部屋の情報追加 部屋の情報追加
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestRoom">部屋の追加</param>
        /// <returns>ApiResponse of ResponseRoom</returns>
        public Knoq.Client.ApiResponse<ResponseRoom> AddRoomsWithHttpInfo(RequestRoom requestRoom)
        {
            Knoq.Client.RequestOptions localVarRequestOptions = new();

            string[] _contentTypes = [
                "application/json"
            ];

            // to determine the Accept header
            string[] _accepts = [
                "application/json"
            ];

            var localVarContentType = Knoq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Knoq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = requestRoom ?? throw new Knoq.Client.ApiException(400, "Missing required parameter 'requestRoom' when calling RoomsApi->AddRooms");


            // make the HTTP request
            var localVarResponse = this.Client.Post<ResponseRoom>("/rooms", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddRooms", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 部屋の情報追加 部屋の情報追加
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestRoom">部屋の追加</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResponseRoom</returns>
        public async System.Threading.Tasks.Task<ResponseRoom> AddRoomsAsync(RequestRoom requestRoom, System.Threading.CancellationToken cancellationToken = default)
        {
            Knoq.Client.ApiResponse<ResponseRoom> localVarResponse = await AddRoomsWithHttpInfoAsync(requestRoom, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 部屋の情報追加 部屋の情報追加
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestRoom">部屋の追加</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResponseRoom)</returns>
        public async System.Threading.Tasks.Task<Knoq.Client.ApiResponse<ResponseRoom>> AddRoomsWithHttpInfoAsync(RequestRoom requestRoom, System.Threading.CancellationToken cancellationToken = default)
        {
            Knoq.Client.RequestOptions localVarRequestOptions = new();

            string[] _contentTypes = [
                "application/json"
            ];

            // to determine the Accept header
            string[] _accepts = [
                "application/json"
            ];


            var localVarContentType = Knoq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Knoq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = requestRoom ?? throw new Knoq.Client.ApiException(400, "Missing required parameter 'requestRoom' when calling RoomsApi->AddRooms");


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ResponseRoom>("/rooms", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddRooms", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 部屋の情報を削除 (関連する予約を削除する) エラーを出して削除を促す予定
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roomID"></param>
        /// <param name="excludeEventID">除外するイベントのID。 (optional)</param>
        /// <returns></returns>
        public void DeleteRoom(Guid roomID, Guid? excludeEventID = default)
        {
            DeleteRoomWithHttpInfo(roomID, excludeEventID);
        }

        /// <summary>
        /// 部屋の情報を削除 (関連する予約を削除する) エラーを出して削除を促す予定
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roomID"></param>
        /// <param name="excludeEventID">除外するイベントのID。 (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Knoq.Client.ApiResponse<Object> DeleteRoomWithHttpInfo(Guid roomID, Guid? excludeEventID = default)
        {
            Knoq.Client.RequestOptions localVarRequestOptions = new();

            string[] _contentTypes = [];

            // to determine the Accept header
            string[] _accepts = [];

            var localVarContentType = Knoq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Knoq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("roomID", Knoq.Client.ClientUtils.ParameterToString(roomID)); // path parameter
            if (excludeEventID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Knoq.Client.ClientUtils.ParameterToMultiMap("", "excludeEventID", excludeEventID));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/rooms/{roomID}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteRoom", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 部屋の情報を削除 (関連する予約を削除する) エラーを出して削除を促す予定
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roomID"></param>
        /// <param name="excludeEventID">除外するイベントのID。 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteRoomAsync(Guid roomID, Guid? excludeEventID = default, System.Threading.CancellationToken cancellationToken = default)
        {
            await DeleteRoomWithHttpInfoAsync(roomID, excludeEventID, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// 部屋の情報を削除 (関連する予約を削除する) エラーを出して削除を促す予定
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roomID"></param>
        /// <param name="excludeEventID">除外するイベントのID。 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Knoq.Client.ApiResponse<Object>> DeleteRoomWithHttpInfoAsync(Guid roomID, Guid? excludeEventID = default, System.Threading.CancellationToken cancellationToken = default)
        {

            Knoq.Client.RequestOptions localVarRequestOptions = new();

            string[] _contentTypes = [];

            // to determine the Accept header
            string[] _accepts = [];


            var localVarContentType = Knoq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Knoq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("roomID", Knoq.Client.ClientUtils.ParameterToString(roomID)); // path parameter
            if (excludeEventID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Knoq.Client.ClientUtils.ParameterToMultiMap("", "excludeEventID", excludeEventID));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/rooms/{roomID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteRoom", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 一件取得する 一件取得する
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roomID"></param>
        /// <param name="excludeEventID">除外するイベントのID。 (optional)</param>
        /// <returns>ResponseRoom</returns>
        public ResponseRoom GetRoom(Guid roomID, Guid? excludeEventID = default)
        {
            Knoq.Client.ApiResponse<ResponseRoom> localVarResponse = GetRoomWithHttpInfo(roomID, excludeEventID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 一件取得する 一件取得する
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roomID"></param>
        /// <param name="excludeEventID">除外するイベントのID。 (optional)</param>
        /// <returns>ApiResponse of ResponseRoom</returns>
        public Knoq.Client.ApiResponse<ResponseRoom> GetRoomWithHttpInfo(Guid roomID, Guid? excludeEventID = default)
        {
            Knoq.Client.RequestOptions localVarRequestOptions = new();

            string[] _contentTypes = [];

            // to determine the Accept header
            string[] _accepts = [
                "application/json"
            ];

            var localVarContentType = Knoq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Knoq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("roomID", Knoq.Client.ClientUtils.ParameterToString(roomID)); // path parameter
            if (excludeEventID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Knoq.Client.ClientUtils.ParameterToMultiMap("", "excludeEventID", excludeEventID));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<ResponseRoom>("/rooms/{roomID}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRoom", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 一件取得する 一件取得する
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roomID"></param>
        /// <param name="excludeEventID">除外するイベントのID。 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResponseRoom</returns>
        public async System.Threading.Tasks.Task<ResponseRoom> GetRoomAsync(Guid roomID, Guid? excludeEventID = default, System.Threading.CancellationToken cancellationToken = default)
        {
            Knoq.Client.ApiResponse<ResponseRoom> localVarResponse = await GetRoomWithHttpInfoAsync(roomID, excludeEventID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 一件取得する 一件取得する
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roomID"></param>
        /// <param name="excludeEventID">除外するイベントのID。 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResponseRoom)</returns>
        public async System.Threading.Tasks.Task<Knoq.Client.ApiResponse<ResponseRoom>> GetRoomWithHttpInfoAsync(Guid roomID, Guid? excludeEventID = default, System.Threading.CancellationToken cancellationToken = default)
        {

            Knoq.Client.RequestOptions localVarRequestOptions = new();

            string[] _contentTypes = [];

            // to determine the Accept header
            string[] _accepts = [
                "application/json"
            ];


            var localVarContentType = Knoq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Knoq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("roomID", Knoq.Client.ClientUtils.ParameterToString(roomID)); // path parameter
            if (excludeEventID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Knoq.Client.ClientUtils.ParameterToMultiMap("", "excludeEventID", excludeEventID));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ResponseRoom>("/rooms/{roomID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRoom", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 進捗部屋の情報を取得 進捗部屋の情報を取得
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateBegin">特定の日時から。 (optional)</param>
        /// <param name="dateEnd">特定の日時まで。 (optional)</param>
        /// <param name="excludeEventID">除外するイベントのID。 (optional)</param>
        /// <returns>List&lt;ResponseRoom&gt;</returns>
        public List<ResponseRoom> GetRooms(string? dateBegin = default, string? dateEnd = default, Guid? excludeEventID = default)
        {
            Knoq.Client.ApiResponse<List<ResponseRoom>> localVarResponse = GetRoomsWithHttpInfo(dateBegin, dateEnd, excludeEventID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 進捗部屋の情報を取得 進捗部屋の情報を取得
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateBegin">特定の日時から。 (optional)</param>
        /// <param name="dateEnd">特定の日時まで。 (optional)</param>
        /// <param name="excludeEventID">除外するイベントのID。 (optional)</param>
        /// <returns>ApiResponse of List&lt;ResponseRoom&gt;</returns>
        public Knoq.Client.ApiResponse<List<ResponseRoom>> GetRoomsWithHttpInfo(string? dateBegin = default, string? dateEnd = default, Guid? excludeEventID = default)
        {
            Knoq.Client.RequestOptions localVarRequestOptions = new();

            string[] _contentTypes = [];

            // to determine the Accept header
            string[] _accepts = [
                "application/json"
            ];

            var localVarContentType = Knoq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Knoq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (dateBegin != null)
            {
                localVarRequestOptions.QueryParameters.Add(Knoq.Client.ClientUtils.ParameterToMultiMap("", "dateBegin", dateBegin));
            }
            if (dateEnd != null)
            {
                localVarRequestOptions.QueryParameters.Add(Knoq.Client.ClientUtils.ParameterToMultiMap("", "dateEnd", dateEnd));
            }
            if (excludeEventID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Knoq.Client.ClientUtils.ParameterToMultiMap("", "excludeEventID", excludeEventID));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ResponseRoom>>("/rooms", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRooms", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 進捗部屋の情報を取得 進捗部屋の情報を取得
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateBegin">特定の日時から。 (optional)</param>
        /// <param name="dateEnd">特定の日時まで。 (optional)</param>
        /// <param name="excludeEventID">除外するイベントのID。 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ResponseRoom&gt;</returns>
        public async System.Threading.Tasks.Task<List<ResponseRoom>> GetRoomsAsync(string? dateBegin = default, string? dateEnd = default, Guid? excludeEventID = default, System.Threading.CancellationToken cancellationToken = default)
        {
            Knoq.Client.ApiResponse<List<ResponseRoom>> localVarResponse = await GetRoomsWithHttpInfoAsync(dateBegin, dateEnd, excludeEventID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 進捗部屋の情報を取得 進捗部屋の情報を取得
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateBegin">特定の日時から。 (optional)</param>
        /// <param name="dateEnd">特定の日時まで。 (optional)</param>
        /// <param name="excludeEventID">除外するイベントのID。 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ResponseRoom&gt;)</returns>
        public async System.Threading.Tasks.Task<Knoq.Client.ApiResponse<List<ResponseRoom>>> GetRoomsWithHttpInfoAsync(string? dateBegin = default, string? dateEnd = default, Guid? excludeEventID = default, System.Threading.CancellationToken cancellationToken = default)
        {

            Knoq.Client.RequestOptions localVarRequestOptions = new();

            string[] _contentTypes = [];

            // to determine the Accept header
            string[] _accepts = [
                "application/json"
            ];


            var localVarContentType = Knoq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Knoq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (dateBegin != null)
            {
                localVarRequestOptions.QueryParameters.Add(Knoq.Client.ClientUtils.ParameterToMultiMap("", "dateBegin", dateBegin));
            }
            if (dateEnd != null)
            {
                localVarRequestOptions.QueryParameters.Add(Knoq.Client.ClientUtils.ParameterToMultiMap("", "dateEnd", dateEnd));
            }
            if (excludeEventID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Knoq.Client.ClientUtils.ParameterToMultiMap("", "excludeEventID", excludeEventID));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ResponseRoom>>("/rooms", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRooms", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 部屋を未確認にする 特権が必要。部屋が使用できることの確認を取り消す。
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roomID"></param>
        /// <returns></returns>
        public void UnverifyRoom(Guid roomID)
        {
            UnverifyRoomWithHttpInfo(roomID);
        }

        /// <summary>
        /// 部屋を未確認にする 特権が必要。部屋が使用できることの確認を取り消す。
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roomID"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Knoq.Client.ApiResponse<Object> UnverifyRoomWithHttpInfo(Guid roomID)
        {
            Knoq.Client.RequestOptions localVarRequestOptions = new();

            string[] _contentTypes = [];

            // to determine the Accept header
            string[] _accepts = [];

            var localVarContentType = Knoq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Knoq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("roomID", Knoq.Client.ClientUtils.ParameterToString(roomID)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/rooms/{roomID}/verified", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UnverifyRoom", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 部屋を未確認にする 特権が必要。部屋が使用できることの確認を取り消す。
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roomID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UnverifyRoomAsync(Guid roomID, System.Threading.CancellationToken cancellationToken = default)
        {
            await UnverifyRoomWithHttpInfoAsync(roomID, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// 部屋を未確認にする 特権が必要。部屋が使用できることの確認を取り消す。
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roomID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Knoq.Client.ApiResponse<Object>> UnverifyRoomWithHttpInfoAsync(Guid roomID, System.Threading.CancellationToken cancellationToken = default)
        {

            Knoq.Client.RequestOptions localVarRequestOptions = new();

            string[] _contentTypes = [];

            // to determine the Accept header
            string[] _accepts = [];


            var localVarContentType = Knoq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Knoq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("roomID", Knoq.Client.ClientUtils.ParameterToString(roomID)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/rooms/{roomID}/verified", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UnverifyRoom", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 部屋を確認する 特権が必要。部屋が使用できることを確認する
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roomID"></param>
        /// <returns></returns>
        public void VerifyRoom(Guid roomID)
        {
            VerifyRoomWithHttpInfo(roomID);
        }

        /// <summary>
        /// 部屋を確認する 特権が必要。部屋が使用できることを確認する
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roomID"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Knoq.Client.ApiResponse<Object> VerifyRoomWithHttpInfo(Guid roomID)
        {
            Knoq.Client.RequestOptions localVarRequestOptions = new();

            string[] _contentTypes = [];

            // to determine the Accept header
            string[] _accepts = [];

            var localVarContentType = Knoq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Knoq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("roomID", Knoq.Client.ClientUtils.ParameterToString(roomID)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/rooms/{roomID}/verified", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VerifyRoom", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 部屋を確認する 特権が必要。部屋が使用できることを確認する
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roomID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task VerifyRoomAsync(Guid roomID, System.Threading.CancellationToken cancellationToken = default)
        {
            await VerifyRoomWithHttpInfoAsync(roomID, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// 部屋を確認する 特権が必要。部屋が使用できることを確認する
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roomID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Knoq.Client.ApiResponse<Object>> VerifyRoomWithHttpInfoAsync(Guid roomID, System.Threading.CancellationToken cancellationToken = default)
        {

            Knoq.Client.RequestOptions localVarRequestOptions = new();

            string[] _contentTypes = [];

            // to determine the Accept header
            string[] _accepts = [];


            var localVarContentType = Knoq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Knoq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("roomID", Knoq.Client.ClientUtils.ParameterToString(roomID)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/rooms/{roomID}/verified", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VerifyRoom", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
