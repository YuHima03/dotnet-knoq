/*
 * traP knoQ
 *
 * This is a sample knoQ server. 
 *
 * The version of the OpenAPI document: 2.1.5
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Knoq.Client.FileParameter;
using OpenAPIDateConverter = Knoq.Client.OpenAPIDateConverter;

namespace Knoq.Model
{
    /// <summary>
    /// ResponseUser
    /// </summary>
    [DataContract(Name = "ResponseUser")]
    public partial class ResponseUser : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ResponseUser" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ResponseUser() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ResponseUser" /> class.
        /// </summary>
        /// <param name="userId">userId (required).</param>
        /// <param name="name">name (required).</param>
        /// <param name="displayName">displayName (required).</param>
        /// <param name="icon">icon (required).</param>
        /// <param name="privileged">privileged (required).</param>
        /// <param name="state">ユーザーアカウント状態 0: 停止 1: 有効 2: 一時停止 (required).</param>
        public ResponseUser(Guid userId = default(Guid), string name = default(string), string displayName = default(string), string icon = default(string), bool privileged = default(bool), int state = default(int))
        {
            this.UserId = userId;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for ResponseUser and cannot be null");
            }
            this.Name = name;
            // to ensure "displayName" is required (not null)
            if (displayName == null)
            {
                throw new ArgumentNullException("displayName is a required property for ResponseUser and cannot be null");
            }
            this.DisplayName = displayName;
            // to ensure "icon" is required (not null)
            if (icon == null)
            {
                throw new ArgumentNullException("icon is a required property for ResponseUser and cannot be null");
            }
            this.Icon = icon;
            this.Privileged = privileged;
            this.State = state;
        }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name = "userId", IsRequired = true, EmitDefaultValue = true)]
        public Guid UserId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        /*
        <example>fuji</example>
        */
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        /*
        <example>ふじ</example>
        */
        [DataMember(Name = "displayName", IsRequired = true, EmitDefaultValue = true)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or Sets Icon
        /// </summary>
        /*
        <example>https://q.trap.jp/api/v3/public/icon/fuji</example>
        */
        [DataMember(Name = "icon", IsRequired = true, EmitDefaultValue = true)]
        public string Icon { get; set; }

        /// <summary>
        /// Gets or Sets Privileged
        /// </summary>
        [DataMember(Name = "privileged", IsRequired = true, EmitDefaultValue = true)]
        public bool Privileged { get; set; }

        /// <summary>
        /// ユーザーアカウント状態 0: 停止 1: 有効 2: 一時停止
        /// </summary>
        /// <value>ユーザーアカウント状態 0: 停止 1: 有効 2: 一時停止</value>
        [DataMember(Name = "state", IsRequired = true, EmitDefaultValue = true)]
        public int State { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ResponseUser {\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Icon: ").Append(Icon).Append("\n");
            sb.Append("  Privileged: ").Append(Privileged).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
