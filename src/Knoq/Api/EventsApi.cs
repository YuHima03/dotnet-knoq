/*
 * traP knoQ
 *
 * This is a sample knoQ server. 
 *
 * The version of the OpenAPI document: 2.1.5
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using Knoq.Client;
using Knoq.Model;

namespace Knoq.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEventsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// タグを追加
        /// </summary>
        /// <remarks>
        /// タグを追加
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventID"></param>
        /// <param name="requestTag">イベントにタグを追加</param>
        /// <returns></returns>
        void AddEventTag(Guid eventID, RequestTag requestTag);

        /// <summary>
        /// タグを追加
        /// </summary>
        /// <remarks>
        /// タグを追加
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventID"></param>
        /// <param name="requestTag">イベントにタグを追加</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddEventTagWithHttpInfo(Guid eventID, RequestTag requestTag);
        /// <summary>
        /// 部屋の使用宣言を行う
        /// </summary>
        /// <remarks>
        /// 部屋の使用宣言を行う
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestEvent">予約の編集</param>
        /// <returns>ResponseEventDetail</returns>
        ResponseEventDetail AddEvents(RequestEvent requestEvent);

        /// <summary>
        /// 部屋の使用宣言を行う
        /// </summary>
        /// <remarks>
        /// 部屋の使用宣言を行う
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestEvent">予約の編集</param>
        /// <returns>ApiResponse of ResponseEventDetail</returns>
        ApiResponse<ResponseEventDetail> AddEventsWithHttpInfo(RequestEvent requestEvent);
        /// <summary>
        /// 使用宣言を削除
        /// </summary>
        /// <remarks>
        /// adminsのみ
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventID"></param>
        /// <returns></returns>
        void DeleteEvent(Guid eventID);

        /// <summary>
        /// 使用宣言を削除
        /// </summary>
        /// <remarks>
        /// adminsのみ
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventID"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteEventWithHttpInfo(Guid eventID);
        /// <summary>
        /// タグを削除
        /// </summary>
        /// <remarks>
        /// locked&#x3D;falseだけ
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventID"></param>
        /// <param name="tagName"></param>
        /// <returns></returns>
        void DeleteEventTag(Guid eventID, string tagName);

        /// <summary>
        /// タグを削除
        /// </summary>
        /// <remarks>
        /// locked&#x3D;falseだけ
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventID"></param>
        /// <param name="tagName"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteEventTagWithHttpInfo(Guid eventID, string tagName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 最近7日間に作成変更削除があったイベントを取得。 削除されたものを含んで返す。 
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ResponseEvent&gt;</returns>
        [Obsolete]
        List<ResponseEvent> GetEventActivities();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 最近7日間に作成変更削除があったイベントを取得。 削除されたものを含んで返す。 
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ResponseEvent&gt;</returns>
        [Obsolete]
        ApiResponse<List<ResponseEvent>> GetEventActivitiesWithHttpInfo();
        /// <summary>
        /// 一件取得
        /// </summary>
        /// <remarks>
        /// 一件取得
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventID"></param>
        /// <returns>ResponseEventDetail</returns>
        ResponseEventDetail GetEventDetail(Guid eventID);

        /// <summary>
        /// 一件取得
        /// </summary>
        /// <remarks>
        /// 一件取得
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventID"></param>
        /// <returns>ApiResponse of ResponseEventDetail</returns>
        ApiResponse<ResponseEventDetail> GetEventDetailWithHttpInfo(Guid eventID);
        /// <summary>
        /// 使用宣言の情報を取得
        /// </summary>
        /// <remarks>
        /// 使用宣言の情報を取得
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateBegin">特定の日時から。 (optional)</param>
        /// <param name="dateEnd">特定の日時まで。 (optional)</param>
        /// <param name="q">Syntax: &lt;br&gt; top  : ε | expr, expr : term ( ( \&quot;||\&quot; | \&quot;&amp;&amp;\&quot; ) term)*&lt;br&gt; term : cmp | \&quot;(\&quot; expr \&quot;)\&quot;&lt;br&gt; cmp  : Attr ( \&quot;&#x3D;&#x3D;\&quot; | \&quot;!&#x3D;\&quot; ) UUID&lt;br&gt; Attr : \&quot;event\&quot; | \&quot;user\&quot; | \&quot;group\&quot; | \&quot;tag\&quot;  (optional)</param>
        /// <returns>List&lt;ResponseEvent&gt;</returns>
        List<ResponseEvent> GetEvents(string? dateBegin = default, string? dateEnd = default, string? q = default);

        /// <summary>
        /// 使用宣言の情報を取得
        /// </summary>
        /// <remarks>
        /// 使用宣言の情報を取得
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateBegin">特定の日時から。 (optional)</param>
        /// <param name="dateEnd">特定の日時まで。 (optional)</param>
        /// <param name="q">Syntax: &lt;br&gt; top  : ε | expr, expr : term ( ( \&quot;||\&quot; | \&quot;&amp;&amp;\&quot; ) term)*&lt;br&gt; term : cmp | \&quot;(\&quot; expr \&quot;)\&quot;&lt;br&gt; cmp  : Attr ( \&quot;&#x3D;&#x3D;\&quot; | \&quot;!&#x3D;\&quot; ) UUID&lt;br&gt; Attr : \&quot;event\&quot; | \&quot;user\&quot; | \&quot;group\&quot; | \&quot;tag\&quot;  (optional)</param>
        /// <returns>ApiResponse of List&lt;ResponseEvent&gt;</returns>
        ApiResponse<List<ResponseEvent>> GetEventsWithHttpInfo(string? dateBegin = default, string? dateEnd = default, string? q = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// groupIdのeventsを取得
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID"></param>
        /// <returns>List&lt;ResponseEvent&gt;</returns>
        List<ResponseEvent> GetEventsOfGroup(Guid groupID);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// groupIdのeventsを取得
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID"></param>
        /// <returns>ApiResponse of List&lt;ResponseEvent&gt;</returns>
        ApiResponse<List<ResponseEvent>> GetEventsOfGroupWithHttpInfo(Guid groupID);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 指定した部屋で行われるイベントを返す
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roomID"></param>
        /// <returns>List&lt;ResponseEvent&gt;</returns>
        List<ResponseEvent> GetEventsOfRoom(Guid roomID);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 指定した部屋で行われるイベントを返す
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roomID"></param>
        /// <returns>ApiResponse of List&lt;ResponseEvent&gt;</returns>
        ApiResponse<List<ResponseEvent>> GetEventsOfRoomWithHttpInfo(Guid roomID);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 所属しているイベントを返す
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="relation">どのような関係性でユーザーと結びつけるか。 取り得る値は、 admins(ユーザーが管理者), belongs(ユーザーが所属している),  belongs-or-admins(ユーザーが管理者または所属している)  イベントはさらに、attendees(not absent) 値がない場合は、belongs として振る舞う  (optional)</param>
        /// <returns>List&lt;ResponseEvent&gt;</returns>
        List<ResponseEvent> GetMyEvents(string? relation = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 所属しているイベントを返す
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="relation">どのような関係性でユーザーと結びつけるか。 取り得る値は、 admins(ユーザーが管理者), belongs(ユーザーが所属している),  belongs-or-admins(ユーザーが管理者または所属している)  イベントはさらに、attendees(not absent) 値がない場合は、belongs として振る舞う  (optional)</param>
        /// <returns>ApiResponse of List&lt;ResponseEvent&gt;</returns>
        ApiResponse<List<ResponseEvent>> GetMyEventsWithHttpInfo(string? relation = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 所属しているイベントを返す
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID"></param>
        /// <param name="relation">どのような関係性でユーザーと結びつけるか。 取り得る値は、 admins(ユーザーが管理者), belongs(ユーザーが所属している),  belongs-or-admins(ユーザーが管理者または所属している)  イベントはさらに、attendees(not absent) 値がない場合は、belongs として振る舞う  (optional)</param>
        /// <returns>List&lt;ResponseEvent&gt;</returns>
        List<ResponseEvent> GetUserEvents(Guid userID, string? relation = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 所属しているイベントを返す
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID"></param>
        /// <param name="relation">どのような関係性でユーザーと結びつけるか。 取り得る値は、 admins(ユーザーが管理者), belongs(ユーザーが所属している),  belongs-or-admins(ユーザーが管理者または所属している)  イベントはさらに、attendees(not absent) 値がない場合は、belongs として振る舞う  (optional)</param>
        /// <returns>ApiResponse of List&lt;ResponseEvent&gt;</returns>
        ApiResponse<List<ResponseEvent>> GetUserEventsWithHttpInfo(Guid userID, string? relation = default);
        /// <summary>
        /// 部屋の使用宣言を更新
        /// </summary>
        /// <remarks>
        /// adminsのみ
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventID"></param>
        /// <param name="requestEvent">予約の編集</param>
        /// <returns>ResponseEventDetail</returns>
        ResponseEventDetail UpdateEvent(Guid eventID, RequestEvent requestEvent);

        /// <summary>
        /// 部屋の使用宣言を更新
        /// </summary>
        /// <remarks>
        /// adminsのみ
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventID"></param>
        /// <param name="requestEvent">予約の編集</param>
        /// <returns>ApiResponse of ResponseEventDetail</returns>
        ApiResponse<ResponseEventDetail> UpdateEventWithHttpInfo(Guid eventID, RequestEvent requestEvent);
        /// <summary>
        /// 自分の参加予定を編集
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventID"></param>
        /// <param name="requestSchedule">イベントの参加予定を更新</param>
        /// <returns></returns>
        void UpdateSchedule(Guid eventID, RequestSchedule requestSchedule);

        /// <summary>
        /// 自分の参加予定を編集
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventID"></param>
        /// <param name="requestSchedule">イベントの参加予定を更新</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateScheduleWithHttpInfo(Guid eventID, RequestSchedule requestSchedule);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEventsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// タグを追加
        /// </summary>
        /// <remarks>
        /// タグを追加
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventID"></param>
        /// <param name="requestTag">イベントにタグを追加</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddEventTagAsync(Guid eventID, RequestTag requestTag, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// タグを追加
        /// </summary>
        /// <remarks>
        /// タグを追加
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventID"></param>
        /// <param name="requestTag">イベントにタグを追加</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddEventTagWithHttpInfoAsync(Guid eventID, RequestTag requestTag, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// 部屋の使用宣言を行う
        /// </summary>
        /// <remarks>
        /// 部屋の使用宣言を行う
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestEvent">予約の編集</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResponseEventDetail</returns>
        System.Threading.Tasks.Task<ResponseEventDetail> AddEventsAsync(RequestEvent requestEvent, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 部屋の使用宣言を行う
        /// </summary>
        /// <remarks>
        /// 部屋の使用宣言を行う
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestEvent">予約の編集</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResponseEventDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseEventDetail>> AddEventsWithHttpInfoAsync(RequestEvent requestEvent, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// 使用宣言を削除
        /// </summary>
        /// <remarks>
        /// adminsのみ
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteEventAsync(Guid eventID, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 使用宣言を削除
        /// </summary>
        /// <remarks>
        /// adminsのみ
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteEventWithHttpInfoAsync(Guid eventID, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// タグを削除
        /// </summary>
        /// <remarks>
        /// locked&#x3D;falseだけ
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventID"></param>
        /// <param name="tagName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteEventTagAsync(Guid eventID, string tagName, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// タグを削除
        /// </summary>
        /// <remarks>
        /// locked&#x3D;falseだけ
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventID"></param>
        /// <param name="tagName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteEventTagWithHttpInfoAsync(Guid eventID, string tagName, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 最近7日間に作成変更削除があったイベントを取得。 削除されたものを含んで返す。 
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ResponseEvent&gt;</returns>
        [Obsolete]
        System.Threading.Tasks.Task<List<ResponseEvent>> GetEventActivitiesAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 最近7日間に作成変更削除があったイベントを取得。 削除されたものを含んで返す。 
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ResponseEvent&gt;)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<List<ResponseEvent>>> GetEventActivitiesWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// 一件取得
        /// </summary>
        /// <remarks>
        /// 一件取得
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResponseEventDetail</returns>
        System.Threading.Tasks.Task<ResponseEventDetail> GetEventDetailAsync(Guid eventID, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 一件取得
        /// </summary>
        /// <remarks>
        /// 一件取得
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResponseEventDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseEventDetail>> GetEventDetailWithHttpInfoAsync(Guid eventID, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// 使用宣言の情報を取得
        /// </summary>
        /// <remarks>
        /// 使用宣言の情報を取得
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateBegin">特定の日時から。 (optional)</param>
        /// <param name="dateEnd">特定の日時まで。 (optional)</param>
        /// <param name="q">Syntax: &lt;br&gt; top  : ε | expr, expr : term ( ( \&quot;||\&quot; | \&quot;&amp;&amp;\&quot; ) term)*&lt;br&gt; term : cmp | \&quot;(\&quot; expr \&quot;)\&quot;&lt;br&gt; cmp  : Attr ( \&quot;&#x3D;&#x3D;\&quot; | \&quot;!&#x3D;\&quot; ) UUID&lt;br&gt; Attr : \&quot;event\&quot; | \&quot;user\&quot; | \&quot;group\&quot; | \&quot;tag\&quot;  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ResponseEvent&gt;</returns>
        System.Threading.Tasks.Task<List<ResponseEvent>> GetEventsAsync(string? dateBegin = default, string? dateEnd = default, string? q = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 使用宣言の情報を取得
        /// </summary>
        /// <remarks>
        /// 使用宣言の情報を取得
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateBegin">特定の日時から。 (optional)</param>
        /// <param name="dateEnd">特定の日時まで。 (optional)</param>
        /// <param name="q">Syntax: &lt;br&gt; top  : ε | expr, expr : term ( ( \&quot;||\&quot; | \&quot;&amp;&amp;\&quot; ) term)*&lt;br&gt; term : cmp | \&quot;(\&quot; expr \&quot;)\&quot;&lt;br&gt; cmp  : Attr ( \&quot;&#x3D;&#x3D;\&quot; | \&quot;!&#x3D;\&quot; ) UUID&lt;br&gt; Attr : \&quot;event\&quot; | \&quot;user\&quot; | \&quot;group\&quot; | \&quot;tag\&quot;  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ResponseEvent&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ResponseEvent>>> GetEventsWithHttpInfoAsync(string? dateBegin = default, string? dateEnd = default, string? q = default, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// groupIdのeventsを取得
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ResponseEvent&gt;</returns>
        System.Threading.Tasks.Task<List<ResponseEvent>> GetEventsOfGroupAsync(Guid groupID, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// groupIdのeventsを取得
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ResponseEvent&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ResponseEvent>>> GetEventsOfGroupWithHttpInfoAsync(Guid groupID, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 指定した部屋で行われるイベントを返す
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roomID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ResponseEvent&gt;</returns>
        System.Threading.Tasks.Task<List<ResponseEvent>> GetEventsOfRoomAsync(Guid roomID, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 指定した部屋で行われるイベントを返す
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roomID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ResponseEvent&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ResponseEvent>>> GetEventsOfRoomWithHttpInfoAsync(Guid roomID, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 所属しているイベントを返す
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="relation">どのような関係性でユーザーと結びつけるか。 取り得る値は、 admins(ユーザーが管理者), belongs(ユーザーが所属している),  belongs-or-admins(ユーザーが管理者または所属している)  イベントはさらに、attendees(not absent) 値がない場合は、belongs として振る舞う  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ResponseEvent&gt;</returns>
        System.Threading.Tasks.Task<List<ResponseEvent>> GetMyEventsAsync(string? relation = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 所属しているイベントを返す
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="relation">どのような関係性でユーザーと結びつけるか。 取り得る値は、 admins(ユーザーが管理者), belongs(ユーザーが所属している),  belongs-or-admins(ユーザーが管理者または所属している)  イベントはさらに、attendees(not absent) 値がない場合は、belongs として振る舞う  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ResponseEvent&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ResponseEvent>>> GetMyEventsWithHttpInfoAsync(string? relation = default, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 所属しているイベントを返す
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID"></param>
        /// <param name="relation">どのような関係性でユーザーと結びつけるか。 取り得る値は、 admins(ユーザーが管理者), belongs(ユーザーが所属している),  belongs-or-admins(ユーザーが管理者または所属している)  イベントはさらに、attendees(not absent) 値がない場合は、belongs として振る舞う  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ResponseEvent&gt;</returns>
        System.Threading.Tasks.Task<List<ResponseEvent>> GetUserEventsAsync(Guid userID, string? relation = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 所属しているイベントを返す
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID"></param>
        /// <param name="relation">どのような関係性でユーザーと結びつけるか。 取り得る値は、 admins(ユーザーが管理者), belongs(ユーザーが所属している),  belongs-or-admins(ユーザーが管理者または所属している)  イベントはさらに、attendees(not absent) 値がない場合は、belongs として振る舞う  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ResponseEvent&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ResponseEvent>>> GetUserEventsWithHttpInfoAsync(Guid userID, string? relation = default, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// 部屋の使用宣言を更新
        /// </summary>
        /// <remarks>
        /// adminsのみ
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventID"></param>
        /// <param name="requestEvent">予約の編集</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResponseEventDetail</returns>
        System.Threading.Tasks.Task<ResponseEventDetail> UpdateEventAsync(Guid eventID, RequestEvent requestEvent, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 部屋の使用宣言を更新
        /// </summary>
        /// <remarks>
        /// adminsのみ
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventID"></param>
        /// <param name="requestEvent">予約の編集</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResponseEventDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseEventDetail>> UpdateEventWithHttpInfoAsync(Guid eventID, RequestEvent requestEvent, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// 自分の参加予定を編集
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventID"></param>
        /// <param name="requestSchedule">イベントの参加予定を更新</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateScheduleAsync(Guid eventID, RequestSchedule requestSchedule, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 自分の参加予定を編集
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventID"></param>
        /// <param name="requestSchedule">イベントの参加予定を更新</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateScheduleWithHttpInfoAsync(Guid eventID, RequestSchedule requestSchedule, System.Threading.CancellationToken cancellationToken = default);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEventsApi : IEventsApiSync, IEventsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EventsApi : IDisposable, IEventsApi
    {
        private Knoq.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="EventsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public EventsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EventsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public EventsApi(string basePath)
        {
            this.Configuration = Knoq.Client.Configuration.MergeConfigurations(
                Knoq.Client.GlobalConfiguration.Instance,
                new Knoq.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Knoq.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Knoq.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EventsApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public EventsApi(Knoq.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Knoq.Client.Configuration.MergeConfigurations(
                Knoq.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Knoq.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Knoq.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EventsApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public EventsApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EventsApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public EventsApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Knoq.Client.Configuration.MergeConfigurations(
                Knoq.Client.GlobalConfiguration.Instance,
                new Knoq.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Knoq.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Knoq.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EventsApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public EventsApi(HttpClient client, Knoq.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Knoq.Client.Configuration.MergeConfigurations(
                Knoq.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Knoq.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Knoq.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EventsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public EventsApi(Knoq.Client.ISynchronousClient client, Knoq.Client.IAsynchronousClient asyncClient, Knoq.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Knoq.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public Knoq.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Knoq.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Knoq.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Knoq.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Knoq.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// タグを追加 タグを追加
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventID"></param>
        /// <param name="requestTag">イベントにタグを追加</param>
        /// <returns></returns>
        public void AddEventTag(Guid eventID, RequestTag requestTag)
        {
            AddEventTagWithHttpInfo(eventID, requestTag);
        }

        /// <summary>
        /// タグを追加 タグを追加
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventID"></param>
        /// <param name="requestTag">イベントにタグを追加</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Knoq.Client.ApiResponse<Object> AddEventTagWithHttpInfo(Guid eventID, RequestTag requestTag)
        {
            // verify the required parameter 'requestTag' is set
            if (requestTag == null)
                throw new Knoq.Client.ApiException(400, "Missing required parameter 'requestTag' when calling EventsApi->AddEventTag");

            Knoq.Client.RequestOptions localVarRequestOptions = new Knoq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Knoq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Knoq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("eventID", Knoq.Client.ClientUtils.ParameterToString(eventID)); // path parameter
            localVarRequestOptions.Data = requestTag;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/events/{eventID}/tags", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddEventTag", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// タグを追加 タグを追加
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventID"></param>
        /// <param name="requestTag">イベントにタグを追加</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddEventTagAsync(Guid eventID, RequestTag requestTag, System.Threading.CancellationToken cancellationToken = default)
        {
            await AddEventTagWithHttpInfoAsync(eventID, requestTag, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// タグを追加 タグを追加
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventID"></param>
        /// <param name="requestTag">イベントにタグを追加</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Knoq.Client.ApiResponse<Object>> AddEventTagWithHttpInfoAsync(Guid eventID, RequestTag requestTag, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'requestTag' is set
            if (requestTag == null)
                throw new Knoq.Client.ApiException(400, "Missing required parameter 'requestTag' when calling EventsApi->AddEventTag");


            Knoq.Client.RequestOptions localVarRequestOptions = new Knoq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = Knoq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Knoq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("eventID", Knoq.Client.ClientUtils.ParameterToString(eventID)); // path parameter
            localVarRequestOptions.Data = requestTag;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/events/{eventID}/tags", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddEventTag", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 部屋の使用宣言を行う 部屋の使用宣言を行う
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestEvent">予約の編集</param>
        /// <returns>ResponseEventDetail</returns>
        public ResponseEventDetail AddEvents(RequestEvent requestEvent)
        {
            Knoq.Client.ApiResponse<ResponseEventDetail> localVarResponse = AddEventsWithHttpInfo(requestEvent);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 部屋の使用宣言を行う 部屋の使用宣言を行う
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestEvent">予約の編集</param>
        /// <returns>ApiResponse of ResponseEventDetail</returns>
        public Knoq.Client.ApiResponse<ResponseEventDetail> AddEventsWithHttpInfo(RequestEvent requestEvent)
        {
            // verify the required parameter 'requestEvent' is set
            if (requestEvent == null)
                throw new Knoq.Client.ApiException(400, "Missing required parameter 'requestEvent' when calling EventsApi->AddEvents");

            Knoq.Client.RequestOptions localVarRequestOptions = new Knoq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knoq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Knoq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = requestEvent;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ResponseEventDetail>("/events", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddEvents", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 部屋の使用宣言を行う 部屋の使用宣言を行う
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestEvent">予約の編集</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResponseEventDetail</returns>
        public async System.Threading.Tasks.Task<ResponseEventDetail> AddEventsAsync(RequestEvent requestEvent, System.Threading.CancellationToken cancellationToken = default)
        {
            Knoq.Client.ApiResponse<ResponseEventDetail> localVarResponse = await AddEventsWithHttpInfoAsync(requestEvent, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 部屋の使用宣言を行う 部屋の使用宣言を行う
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestEvent">予約の編集</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResponseEventDetail)</returns>
        public async System.Threading.Tasks.Task<Knoq.Client.ApiResponse<ResponseEventDetail>> AddEventsWithHttpInfoAsync(RequestEvent requestEvent, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'requestEvent' is set
            if (requestEvent == null)
                throw new Knoq.Client.ApiException(400, "Missing required parameter 'requestEvent' when calling EventsApi->AddEvents");


            Knoq.Client.RequestOptions localVarRequestOptions = new Knoq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Knoq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Knoq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = requestEvent;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ResponseEventDetail>("/events", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddEvents", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 使用宣言を削除 adminsのみ
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventID"></param>
        /// <returns></returns>
        public void DeleteEvent(Guid eventID)
        {
            DeleteEventWithHttpInfo(eventID);
        }

        /// <summary>
        /// 使用宣言を削除 adminsのみ
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventID"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Knoq.Client.ApiResponse<Object> DeleteEventWithHttpInfo(Guid eventID)
        {
            Knoq.Client.RequestOptions localVarRequestOptions = new Knoq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Knoq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Knoq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("eventID", Knoq.Client.ClientUtils.ParameterToString(eventID)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/events/{eventID}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteEvent", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 使用宣言を削除 adminsのみ
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteEventAsync(Guid eventID, System.Threading.CancellationToken cancellationToken = default)
        {
            await DeleteEventWithHttpInfoAsync(eventID, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// 使用宣言を削除 adminsのみ
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Knoq.Client.ApiResponse<Object>> DeleteEventWithHttpInfoAsync(Guid eventID, System.Threading.CancellationToken cancellationToken = default)
        {

            Knoq.Client.RequestOptions localVarRequestOptions = new Knoq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = Knoq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Knoq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("eventID", Knoq.Client.ClientUtils.ParameterToString(eventID)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/events/{eventID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteEvent", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// タグを削除 locked&#x3D;falseだけ
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventID"></param>
        /// <param name="tagName"></param>
        /// <returns></returns>
        public void DeleteEventTag(Guid eventID, string tagName)
        {
            DeleteEventTagWithHttpInfo(eventID, tagName);
        }

        /// <summary>
        /// タグを削除 locked&#x3D;falseだけ
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventID"></param>
        /// <param name="tagName"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Knoq.Client.ApiResponse<Object> DeleteEventTagWithHttpInfo(Guid eventID, string tagName)
        {
            // verify the required parameter 'tagName' is set
            if (tagName == null)
                throw new Knoq.Client.ApiException(400, "Missing required parameter 'tagName' when calling EventsApi->DeleteEventTag");

            Knoq.Client.RequestOptions localVarRequestOptions = new Knoq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Knoq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Knoq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("eventID", Knoq.Client.ClientUtils.ParameterToString(eventID)); // path parameter
            localVarRequestOptions.PathParameters.Add("tagName", Knoq.Client.ClientUtils.ParameterToString(tagName)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/events/{eventID}/tags/{tagName}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteEventTag", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// タグを削除 locked&#x3D;falseだけ
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventID"></param>
        /// <param name="tagName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteEventTagAsync(Guid eventID, string tagName, System.Threading.CancellationToken cancellationToken = default)
        {
            await DeleteEventTagWithHttpInfoAsync(eventID, tagName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// タグを削除 locked&#x3D;falseだけ
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventID"></param>
        /// <param name="tagName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Knoq.Client.ApiResponse<Object>> DeleteEventTagWithHttpInfoAsync(Guid eventID, string tagName, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'tagName' is set
            if (tagName == null)
                throw new Knoq.Client.ApiException(400, "Missing required parameter 'tagName' when calling EventsApi->DeleteEventTag");


            Knoq.Client.RequestOptions localVarRequestOptions = new Knoq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = Knoq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Knoq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("eventID", Knoq.Client.ClientUtils.ParameterToString(eventID)); // path parameter
            localVarRequestOptions.PathParameters.Add("tagName", Knoq.Client.ClientUtils.ParameterToString(tagName)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/events/{eventID}/tags/{tagName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteEventTag", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  最近7日間に作成変更削除があったイベントを取得。 削除されたものを含んで返す。 
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ResponseEvent&gt;</returns>
        [Obsolete]
        public List<ResponseEvent> GetEventActivities()
        {
            Knoq.Client.ApiResponse<List<ResponseEvent>> localVarResponse = GetEventActivitiesWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  最近7日間に作成変更削除があったイベントを取得。 削除されたものを含んで返す。 
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ResponseEvent&gt;</returns>
        [Obsolete]
        public Knoq.Client.ApiResponse<List<ResponseEvent>> GetEventActivitiesWithHttpInfo()
        {
            Knoq.Client.RequestOptions localVarRequestOptions = new Knoq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knoq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Knoq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ResponseEvent>>("/activity/events", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventActivities", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  最近7日間に作成変更削除があったイベントを取得。 削除されたものを含んで返す。 
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ResponseEvent&gt;</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<List<ResponseEvent>> GetEventActivitiesAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            Knoq.Client.ApiResponse<List<ResponseEvent>> localVarResponse = await GetEventActivitiesWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  最近7日間に作成変更削除があったイベントを取得。 削除されたものを含んで返す。 
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ResponseEvent&gt;)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<Knoq.Client.ApiResponse<List<ResponseEvent>>> GetEventActivitiesWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default)
        {

            Knoq.Client.RequestOptions localVarRequestOptions = new Knoq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Knoq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Knoq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ResponseEvent>>("/activity/events", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventActivities", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 一件取得 一件取得
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventID"></param>
        /// <returns>ResponseEventDetail</returns>
        public ResponseEventDetail GetEventDetail(Guid eventID)
        {
            Knoq.Client.ApiResponse<ResponseEventDetail> localVarResponse = GetEventDetailWithHttpInfo(eventID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 一件取得 一件取得
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventID"></param>
        /// <returns>ApiResponse of ResponseEventDetail</returns>
        public Knoq.Client.ApiResponse<ResponseEventDetail> GetEventDetailWithHttpInfo(Guid eventID)
        {
            Knoq.Client.RequestOptions localVarRequestOptions = new Knoq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knoq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Knoq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("eventID", Knoq.Client.ClientUtils.ParameterToString(eventID)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<ResponseEventDetail>("/events/{eventID}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventDetail", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 一件取得 一件取得
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResponseEventDetail</returns>
        public async System.Threading.Tasks.Task<ResponseEventDetail> GetEventDetailAsync(Guid eventID, System.Threading.CancellationToken cancellationToken = default)
        {
            Knoq.Client.ApiResponse<ResponseEventDetail> localVarResponse = await GetEventDetailWithHttpInfoAsync(eventID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 一件取得 一件取得
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResponseEventDetail)</returns>
        public async System.Threading.Tasks.Task<Knoq.Client.ApiResponse<ResponseEventDetail>> GetEventDetailWithHttpInfoAsync(Guid eventID, System.Threading.CancellationToken cancellationToken = default)
        {

            Knoq.Client.RequestOptions localVarRequestOptions = new Knoq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Knoq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Knoq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("eventID", Knoq.Client.ClientUtils.ParameterToString(eventID)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ResponseEventDetail>("/events/{eventID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventDetail", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 使用宣言の情報を取得 使用宣言の情報を取得
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateBegin">特定の日時から。 (optional)</param>
        /// <param name="dateEnd">特定の日時まで。 (optional)</param>
        /// <param name="q">Syntax: &lt;br&gt; top  : ε | expr, expr : term ( ( \&quot;||\&quot; | \&quot;&amp;&amp;\&quot; ) term)*&lt;br&gt; term : cmp | \&quot;(\&quot; expr \&quot;)\&quot;&lt;br&gt; cmp  : Attr ( \&quot;&#x3D;&#x3D;\&quot; | \&quot;!&#x3D;\&quot; ) UUID&lt;br&gt; Attr : \&quot;event\&quot; | \&quot;user\&quot; | \&quot;group\&quot; | \&quot;tag\&quot;  (optional)</param>
        /// <returns>List&lt;ResponseEvent&gt;</returns>
        public List<ResponseEvent> GetEvents(string? dateBegin = default, string? dateEnd = default, string? q = default)
        {
            Knoq.Client.ApiResponse<List<ResponseEvent>> localVarResponse = GetEventsWithHttpInfo(dateBegin, dateEnd, q);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 使用宣言の情報を取得 使用宣言の情報を取得
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateBegin">特定の日時から。 (optional)</param>
        /// <param name="dateEnd">特定の日時まで。 (optional)</param>
        /// <param name="q">Syntax: &lt;br&gt; top  : ε | expr, expr : term ( ( \&quot;||\&quot; | \&quot;&amp;&amp;\&quot; ) term)*&lt;br&gt; term : cmp | \&quot;(\&quot; expr \&quot;)\&quot;&lt;br&gt; cmp  : Attr ( \&quot;&#x3D;&#x3D;\&quot; | \&quot;!&#x3D;\&quot; ) UUID&lt;br&gt; Attr : \&quot;event\&quot; | \&quot;user\&quot; | \&quot;group\&quot; | \&quot;tag\&quot;  (optional)</param>
        /// <returns>ApiResponse of List&lt;ResponseEvent&gt;</returns>
        public Knoq.Client.ApiResponse<List<ResponseEvent>> GetEventsWithHttpInfo(string? dateBegin = default, string? dateEnd = default, string? q = default)
        {
            Knoq.Client.RequestOptions localVarRequestOptions = new Knoq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knoq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Knoq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (dateBegin != null)
            {
                localVarRequestOptions.QueryParameters.Add(Knoq.Client.ClientUtils.ParameterToMultiMap("", "dateBegin", dateBegin));
            }
            if (dateEnd != null)
            {
                localVarRequestOptions.QueryParameters.Add(Knoq.Client.ClientUtils.ParameterToMultiMap("", "dateEnd", dateEnd));
            }
            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(Knoq.Client.ClientUtils.ParameterToMultiMap("", "q", q));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ResponseEvent>>("/events", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEvents", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 使用宣言の情報を取得 使用宣言の情報を取得
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateBegin">特定の日時から。 (optional)</param>
        /// <param name="dateEnd">特定の日時まで。 (optional)</param>
        /// <param name="q">Syntax: &lt;br&gt; top  : ε | expr, expr : term ( ( \&quot;||\&quot; | \&quot;&amp;&amp;\&quot; ) term)*&lt;br&gt; term : cmp | \&quot;(\&quot; expr \&quot;)\&quot;&lt;br&gt; cmp  : Attr ( \&quot;&#x3D;&#x3D;\&quot; | \&quot;!&#x3D;\&quot; ) UUID&lt;br&gt; Attr : \&quot;event\&quot; | \&quot;user\&quot; | \&quot;group\&quot; | \&quot;tag\&quot;  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ResponseEvent&gt;</returns>
        public async System.Threading.Tasks.Task<List<ResponseEvent>> GetEventsAsync(string? dateBegin = default, string? dateEnd = default, string? q = default, System.Threading.CancellationToken cancellationToken = default)
        {
            Knoq.Client.ApiResponse<List<ResponseEvent>> localVarResponse = await GetEventsWithHttpInfoAsync(dateBegin, dateEnd, q, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 使用宣言の情報を取得 使用宣言の情報を取得
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateBegin">特定の日時から。 (optional)</param>
        /// <param name="dateEnd">特定の日時まで。 (optional)</param>
        /// <param name="q">Syntax: &lt;br&gt; top  : ε | expr, expr : term ( ( \&quot;||\&quot; | \&quot;&amp;&amp;\&quot; ) term)*&lt;br&gt; term : cmp | \&quot;(\&quot; expr \&quot;)\&quot;&lt;br&gt; cmp  : Attr ( \&quot;&#x3D;&#x3D;\&quot; | \&quot;!&#x3D;\&quot; ) UUID&lt;br&gt; Attr : \&quot;event\&quot; | \&quot;user\&quot; | \&quot;group\&quot; | \&quot;tag\&quot;  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ResponseEvent&gt;)</returns>
        public async System.Threading.Tasks.Task<Knoq.Client.ApiResponse<List<ResponseEvent>>> GetEventsWithHttpInfoAsync(string? dateBegin = default, string? dateEnd = default, string? q = default, System.Threading.CancellationToken cancellationToken = default)
        {

            Knoq.Client.RequestOptions localVarRequestOptions = new Knoq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Knoq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Knoq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (dateBegin != null)
            {
                localVarRequestOptions.QueryParameters.Add(Knoq.Client.ClientUtils.ParameterToMultiMap("", "dateBegin", dateBegin));
            }
            if (dateEnd != null)
            {
                localVarRequestOptions.QueryParameters.Add(Knoq.Client.ClientUtils.ParameterToMultiMap("", "dateEnd", dateEnd));
            }
            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(Knoq.Client.ClientUtils.ParameterToMultiMap("", "q", q));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ResponseEvent>>("/events", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEvents", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  groupIdのeventsを取得
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID"></param>
        /// <returns>List&lt;ResponseEvent&gt;</returns>
        public List<ResponseEvent> GetEventsOfGroup(Guid groupID)
        {
            Knoq.Client.ApiResponse<List<ResponseEvent>> localVarResponse = GetEventsOfGroupWithHttpInfo(groupID);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  groupIdのeventsを取得
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID"></param>
        /// <returns>ApiResponse of List&lt;ResponseEvent&gt;</returns>
        public Knoq.Client.ApiResponse<List<ResponseEvent>> GetEventsOfGroupWithHttpInfo(Guid groupID)
        {
            Knoq.Client.RequestOptions localVarRequestOptions = new Knoq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knoq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Knoq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("groupID", Knoq.Client.ClientUtils.ParameterToString(groupID)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ResponseEvent>>("/groups/{groupID}/events", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventsOfGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  groupIdのeventsを取得
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ResponseEvent&gt;</returns>
        public async System.Threading.Tasks.Task<List<ResponseEvent>> GetEventsOfGroupAsync(Guid groupID, System.Threading.CancellationToken cancellationToken = default)
        {
            Knoq.Client.ApiResponse<List<ResponseEvent>> localVarResponse = await GetEventsOfGroupWithHttpInfoAsync(groupID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  groupIdのeventsを取得
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ResponseEvent&gt;)</returns>
        public async System.Threading.Tasks.Task<Knoq.Client.ApiResponse<List<ResponseEvent>>> GetEventsOfGroupWithHttpInfoAsync(Guid groupID, System.Threading.CancellationToken cancellationToken = default)
        {

            Knoq.Client.RequestOptions localVarRequestOptions = new Knoq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Knoq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Knoq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("groupID", Knoq.Client.ClientUtils.ParameterToString(groupID)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ResponseEvent>>("/groups/{groupID}/events", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventsOfGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  指定した部屋で行われるイベントを返す
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roomID"></param>
        /// <returns>List&lt;ResponseEvent&gt;</returns>
        public List<ResponseEvent> GetEventsOfRoom(Guid roomID)
        {
            Knoq.Client.ApiResponse<List<ResponseEvent>> localVarResponse = GetEventsOfRoomWithHttpInfo(roomID);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  指定した部屋で行われるイベントを返す
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roomID"></param>
        /// <returns>ApiResponse of List&lt;ResponseEvent&gt;</returns>
        public Knoq.Client.ApiResponse<List<ResponseEvent>> GetEventsOfRoomWithHttpInfo(Guid roomID)
        {
            Knoq.Client.RequestOptions localVarRequestOptions = new Knoq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knoq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Knoq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("roomID", Knoq.Client.ClientUtils.ParameterToString(roomID)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ResponseEvent>>("/rooms/{roomID}/events", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventsOfRoom", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  指定した部屋で行われるイベントを返す
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roomID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ResponseEvent&gt;</returns>
        public async System.Threading.Tasks.Task<List<ResponseEvent>> GetEventsOfRoomAsync(Guid roomID, System.Threading.CancellationToken cancellationToken = default)
        {
            Knoq.Client.ApiResponse<List<ResponseEvent>> localVarResponse = await GetEventsOfRoomWithHttpInfoAsync(roomID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  指定した部屋で行われるイベントを返す
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roomID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ResponseEvent&gt;)</returns>
        public async System.Threading.Tasks.Task<Knoq.Client.ApiResponse<List<ResponseEvent>>> GetEventsOfRoomWithHttpInfoAsync(Guid roomID, System.Threading.CancellationToken cancellationToken = default)
        {

            Knoq.Client.RequestOptions localVarRequestOptions = new Knoq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Knoq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Knoq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("roomID", Knoq.Client.ClientUtils.ParameterToString(roomID)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ResponseEvent>>("/rooms/{roomID}/events", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventsOfRoom", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  所属しているイベントを返す
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="relation">どのような関係性でユーザーと結びつけるか。 取り得る値は、 admins(ユーザーが管理者), belongs(ユーザーが所属している),  belongs-or-admins(ユーザーが管理者または所属している)  イベントはさらに、attendees(not absent) 値がない場合は、belongs として振る舞う  (optional)</param>
        /// <returns>List&lt;ResponseEvent&gt;</returns>
        public List<ResponseEvent> GetMyEvents(string? relation = default)
        {
            Knoq.Client.ApiResponse<List<ResponseEvent>> localVarResponse = GetMyEventsWithHttpInfo(relation);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  所属しているイベントを返す
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="relation">どのような関係性でユーザーと結びつけるか。 取り得る値は、 admins(ユーザーが管理者), belongs(ユーザーが所属している),  belongs-or-admins(ユーザーが管理者または所属している)  イベントはさらに、attendees(not absent) 値がない場合は、belongs として振る舞う  (optional)</param>
        /// <returns>ApiResponse of List&lt;ResponseEvent&gt;</returns>
        public Knoq.Client.ApiResponse<List<ResponseEvent>> GetMyEventsWithHttpInfo(string? relation = default)
        {
            Knoq.Client.RequestOptions localVarRequestOptions = new Knoq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knoq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Knoq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (relation != null)
            {
                localVarRequestOptions.QueryParameters.Add(Knoq.Client.ClientUtils.ParameterToMultiMap("", "relation", relation));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ResponseEvent>>("/users/me/events", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMyEvents", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  所属しているイベントを返す
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="relation">どのような関係性でユーザーと結びつけるか。 取り得る値は、 admins(ユーザーが管理者), belongs(ユーザーが所属している),  belongs-or-admins(ユーザーが管理者または所属している)  イベントはさらに、attendees(not absent) 値がない場合は、belongs として振る舞う  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ResponseEvent&gt;</returns>
        public async System.Threading.Tasks.Task<List<ResponseEvent>> GetMyEventsAsync(string? relation = default, System.Threading.CancellationToken cancellationToken = default)
        {
            Knoq.Client.ApiResponse<List<ResponseEvent>> localVarResponse = await GetMyEventsWithHttpInfoAsync(relation, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  所属しているイベントを返す
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="relation">どのような関係性でユーザーと結びつけるか。 取り得る値は、 admins(ユーザーが管理者), belongs(ユーザーが所属している),  belongs-or-admins(ユーザーが管理者または所属している)  イベントはさらに、attendees(not absent) 値がない場合は、belongs として振る舞う  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ResponseEvent&gt;)</returns>
        public async System.Threading.Tasks.Task<Knoq.Client.ApiResponse<List<ResponseEvent>>> GetMyEventsWithHttpInfoAsync(string? relation = default, System.Threading.CancellationToken cancellationToken = default)
        {

            Knoq.Client.RequestOptions localVarRequestOptions = new Knoq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Knoq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Knoq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (relation != null)
            {
                localVarRequestOptions.QueryParameters.Add(Knoq.Client.ClientUtils.ParameterToMultiMap("", "relation", relation));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ResponseEvent>>("/users/me/events", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMyEvents", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  所属しているイベントを返す
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID"></param>
        /// <param name="relation">どのような関係性でユーザーと結びつけるか。 取り得る値は、 admins(ユーザーが管理者), belongs(ユーザーが所属している),  belongs-or-admins(ユーザーが管理者または所属している)  イベントはさらに、attendees(not absent) 値がない場合は、belongs として振る舞う  (optional)</param>
        /// <returns>List&lt;ResponseEvent&gt;</returns>
        public List<ResponseEvent> GetUserEvents(Guid userID, string? relation = default)
        {
            Knoq.Client.ApiResponse<List<ResponseEvent>> localVarResponse = GetUserEventsWithHttpInfo(userID, relation);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  所属しているイベントを返す
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID"></param>
        /// <param name="relation">どのような関係性でユーザーと結びつけるか。 取り得る値は、 admins(ユーザーが管理者), belongs(ユーザーが所属している),  belongs-or-admins(ユーザーが管理者または所属している)  イベントはさらに、attendees(not absent) 値がない場合は、belongs として振る舞う  (optional)</param>
        /// <returns>ApiResponse of List&lt;ResponseEvent&gt;</returns>
        public Knoq.Client.ApiResponse<List<ResponseEvent>> GetUserEventsWithHttpInfo(Guid userID, string? relation = default)
        {
            Knoq.Client.RequestOptions localVarRequestOptions = new Knoq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knoq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Knoq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("userID", Knoq.Client.ClientUtils.ParameterToString(userID)); // path parameter
            if (relation != null)
            {
                localVarRequestOptions.QueryParameters.Add(Knoq.Client.ClientUtils.ParameterToMultiMap("", "relation", relation));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ResponseEvent>>("/users/{userID}/events", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserEvents", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  所属しているイベントを返す
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID"></param>
        /// <param name="relation">どのような関係性でユーザーと結びつけるか。 取り得る値は、 admins(ユーザーが管理者), belongs(ユーザーが所属している),  belongs-or-admins(ユーザーが管理者または所属している)  イベントはさらに、attendees(not absent) 値がない場合は、belongs として振る舞う  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ResponseEvent&gt;</returns>
        public async System.Threading.Tasks.Task<List<ResponseEvent>> GetUserEventsAsync(Guid userID, string? relation = default, System.Threading.CancellationToken cancellationToken = default)
        {
            Knoq.Client.ApiResponse<List<ResponseEvent>> localVarResponse = await GetUserEventsWithHttpInfoAsync(userID, relation, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  所属しているイベントを返す
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID"></param>
        /// <param name="relation">どのような関係性でユーザーと結びつけるか。 取り得る値は、 admins(ユーザーが管理者), belongs(ユーザーが所属している),  belongs-or-admins(ユーザーが管理者または所属している)  イベントはさらに、attendees(not absent) 値がない場合は、belongs として振る舞う  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ResponseEvent&gt;)</returns>
        public async System.Threading.Tasks.Task<Knoq.Client.ApiResponse<List<ResponseEvent>>> GetUserEventsWithHttpInfoAsync(Guid userID, string? relation = default, System.Threading.CancellationToken cancellationToken = default)
        {

            Knoq.Client.RequestOptions localVarRequestOptions = new Knoq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Knoq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Knoq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("userID", Knoq.Client.ClientUtils.ParameterToString(userID)); // path parameter
            if (relation != null)
            {
                localVarRequestOptions.QueryParameters.Add(Knoq.Client.ClientUtils.ParameterToMultiMap("", "relation", relation));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ResponseEvent>>("/users/{userID}/events", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserEvents", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 部屋の使用宣言を更新 adminsのみ
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventID"></param>
        /// <param name="requestEvent">予約の編集</param>
        /// <returns>ResponseEventDetail</returns>
        public ResponseEventDetail UpdateEvent(Guid eventID, RequestEvent requestEvent)
        {
            Knoq.Client.ApiResponse<ResponseEventDetail> localVarResponse = UpdateEventWithHttpInfo(eventID, requestEvent);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 部屋の使用宣言を更新 adminsのみ
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventID"></param>
        /// <param name="requestEvent">予約の編集</param>
        /// <returns>ApiResponse of ResponseEventDetail</returns>
        public Knoq.Client.ApiResponse<ResponseEventDetail> UpdateEventWithHttpInfo(Guid eventID, RequestEvent requestEvent)
        {
            // verify the required parameter 'requestEvent' is set
            if (requestEvent == null)
                throw new Knoq.Client.ApiException(400, "Missing required parameter 'requestEvent' when calling EventsApi->UpdateEvent");

            Knoq.Client.RequestOptions localVarRequestOptions = new Knoq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knoq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Knoq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("eventID", Knoq.Client.ClientUtils.ParameterToString(eventID)); // path parameter
            localVarRequestOptions.Data = requestEvent;


            // make the HTTP request
            var localVarResponse = this.Client.Put<ResponseEventDetail>("/events/{eventID}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateEvent", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 部屋の使用宣言を更新 adminsのみ
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventID"></param>
        /// <param name="requestEvent">予約の編集</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResponseEventDetail</returns>
        public async System.Threading.Tasks.Task<ResponseEventDetail> UpdateEventAsync(Guid eventID, RequestEvent requestEvent, System.Threading.CancellationToken cancellationToken = default)
        {
            Knoq.Client.ApiResponse<ResponseEventDetail> localVarResponse = await UpdateEventWithHttpInfoAsync(eventID, requestEvent, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 部屋の使用宣言を更新 adminsのみ
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventID"></param>
        /// <param name="requestEvent">予約の編集</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResponseEventDetail)</returns>
        public async System.Threading.Tasks.Task<Knoq.Client.ApiResponse<ResponseEventDetail>> UpdateEventWithHttpInfoAsync(Guid eventID, RequestEvent requestEvent, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'requestEvent' is set
            if (requestEvent == null)
                throw new Knoq.Client.ApiException(400, "Missing required parameter 'requestEvent' when calling EventsApi->UpdateEvent");


            Knoq.Client.RequestOptions localVarRequestOptions = new Knoq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Knoq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Knoq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("eventID", Knoq.Client.ClientUtils.ParameterToString(eventID)); // path parameter
            localVarRequestOptions.Data = requestEvent;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<ResponseEventDetail>("/events/{eventID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateEvent", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 自分の参加予定を編集 
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventID"></param>
        /// <param name="requestSchedule">イベントの参加予定を更新</param>
        /// <returns></returns>
        public void UpdateSchedule(Guid eventID, RequestSchedule requestSchedule)
        {
            UpdateScheduleWithHttpInfo(eventID, requestSchedule);
        }

        /// <summary>
        /// 自分の参加予定を編集 
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventID"></param>
        /// <param name="requestSchedule">イベントの参加予定を更新</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Knoq.Client.ApiResponse<Object> UpdateScheduleWithHttpInfo(Guid eventID, RequestSchedule requestSchedule)
        {
            // verify the required parameter 'requestSchedule' is set
            if (requestSchedule == null)
                throw new Knoq.Client.ApiException(400, "Missing required parameter 'requestSchedule' when calling EventsApi->UpdateSchedule");

            Knoq.Client.RequestOptions localVarRequestOptions = new Knoq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Knoq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Knoq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("eventID", Knoq.Client.ClientUtils.ParameterToString(eventID)); // path parameter
            localVarRequestOptions.Data = requestSchedule;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/events/{eventID}/attendees/me", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSchedule", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 自分の参加予定を編集 
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventID"></param>
        /// <param name="requestSchedule">イベントの参加予定を更新</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateScheduleAsync(Guid eventID, RequestSchedule requestSchedule, System.Threading.CancellationToken cancellationToken = default)
        {
            await UpdateScheduleWithHttpInfoAsync(eventID, requestSchedule, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// 自分の参加予定を編集 
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventID"></param>
        /// <param name="requestSchedule">イベントの参加予定を更新</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Knoq.Client.ApiResponse<Object>> UpdateScheduleWithHttpInfoAsync(Guid eventID, RequestSchedule requestSchedule, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'requestSchedule' is set
            if (requestSchedule == null)
                throw new Knoq.Client.ApiException(400, "Missing required parameter 'requestSchedule' when calling EventsApi->UpdateSchedule");


            Knoq.Client.RequestOptions localVarRequestOptions = new Knoq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = Knoq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Knoq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("eventID", Knoq.Client.ClientUtils.ParameterToString(eventID)); // path parameter
            localVarRequestOptions.Data = requestSchedule;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/events/{eventID}/attendees/me", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSchedule", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
