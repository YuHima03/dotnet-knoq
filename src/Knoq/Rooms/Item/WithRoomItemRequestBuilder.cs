// <auto-generated/>
#pragma warning disable CS0618
using Knoq.Models;
using Knoq.Rooms.Item.Events;
using Knoq.Rooms.Item.Verified;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Knoq.Rooms.Item
{
    /// <summary>
    /// Builds and executes requests for operations under \rooms\{roomID}
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class WithRoomItemRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The events property</summary>
        public global::Knoq.Rooms.Item.Events.EventsRequestBuilder Events
        {
            get => new global::Knoq.Rooms.Item.Events.EventsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The verified property</summary>
        public global::Knoq.Rooms.Item.Verified.VerifiedRequestBuilder Verified
        {
            get => new global::Knoq.Rooms.Item.Verified.VerifiedRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Knoq.Rooms.Item.WithRoomItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithRoomItemRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/rooms/{roomID}{?excludeEventID*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Knoq.Rooms.Item.WithRoomItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithRoomItemRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/rooms/{roomID}{?excludeEventID*}", rawUrl)
        {
        }
        /// <summary>
        /// (関連する予約を削除する) エラーを出して削除を促す予定
        /// </summary>
        /// <returns>A <see cref="Stream"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<Stream?> DeleteAsync(Action<RequestConfiguration<global::Knoq.Rooms.Item.WithRoomItemRequestBuilder.WithRoomItemRequestBuilderDeleteQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<Stream> DeleteAsync(Action<RequestConfiguration<global::Knoq.Rooms.Item.WithRoomItemRequestBuilder.WithRoomItemRequestBuilderDeleteQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToDeleteRequestInformation(requestConfiguration);
            return await RequestAdapter.SendPrimitiveAsync<Stream>(requestInfo, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// 一件取得する
        /// </summary>
        /// <returns>A <see cref="global::Knoq.Models.ResponseRoom"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Knoq.Models.ResponseRoom?> GetAsync(Action<RequestConfiguration<global::Knoq.Rooms.Item.WithRoomItemRequestBuilder.WithRoomItemRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Knoq.Models.ResponseRoom> GetAsync(Action<RequestConfiguration<global::Knoq.Rooms.Item.WithRoomItemRequestBuilder.WithRoomItemRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::Knoq.Models.ResponseRoom>(requestInfo, global::Knoq.Models.ResponseRoom.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// (関連する予約を削除する) エラーを出して削除を促す予定
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<global::Knoq.Rooms.Item.WithRoomItemRequestBuilder.WithRoomItemRequestBuilderDeleteQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<global::Knoq.Rooms.Item.WithRoomItemRequestBuilder.WithRoomItemRequestBuilderDeleteQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.DELETE, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            return requestInfo;
        }
        /// <summary>
        /// 一件取得する
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Knoq.Rooms.Item.WithRoomItemRequestBuilder.WithRoomItemRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Knoq.Rooms.Item.WithRoomItemRequestBuilder.WithRoomItemRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Knoq.Rooms.Item.WithRoomItemRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Knoq.Rooms.Item.WithRoomItemRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Knoq.Rooms.Item.WithRoomItemRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// (関連する予約を削除する) エラーを出して削除を促す予定
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithRoomItemRequestBuilderDeleteQueryParameters 
        {
            /// <summary>除外するイベントのID。</summary>
            [QueryParameter("excludeEventID")]
            public Guid? ExcludeEventID { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithRoomItemRequestBuilderDeleteRequestConfiguration : RequestConfiguration<global::Knoq.Rooms.Item.WithRoomItemRequestBuilder.WithRoomItemRequestBuilderDeleteQueryParameters>
        {
        }
        /// <summary>
        /// 一件取得する
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithRoomItemRequestBuilderGetQueryParameters 
        {
            /// <summary>除外するイベントのID。</summary>
            [QueryParameter("excludeEventID")]
            public Guid? ExcludeEventID { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithRoomItemRequestBuilderGetRequestConfiguration : RequestConfiguration<global::Knoq.Rooms.Item.WithRoomItemRequestBuilder.WithRoomItemRequestBuilderGetQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
