/*
 * traP knoQ
 *
 * This is a sample knoQ server. 
 *
 * The version of the OpenAPI document: 2.1.5
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using Knoq.Client;
using Knoq.Model;

namespace Knoq.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGroupsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 自分を追加。open&#x3D;true
        /// </summary>
        /// <remarks>
        /// 自分をメンバーに追加する
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID"></param>
        /// <returns></returns>
        void AddMeToGroup(Guid groupID);

        /// <summary>
        /// 自分を追加。open&#x3D;true
        /// </summary>
        /// <remarks>
        /// 自分をメンバーに追加する
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddMeToGroupWithHttpInfo(Guid groupID);
        /// <summary>
        /// グループ作成
        /// </summary>
        /// <remarks>
        /// グループを作成します。traQのグループとは無関係です。
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestGroup">グループの追加</param>
        /// <returns>ResponseGroup</returns>
        ResponseGroup CreateGroup(RequestGroup requestGroup);

        /// <summary>
        /// グループ作成
        /// </summary>
        /// <remarks>
        /// グループを作成します。traQのグループとは無関係です。
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestGroup">グループの追加</param>
        /// <returns>ApiResponse of ResponseGroup</returns>
        ApiResponse<ResponseGroup> CreateGroupWithHttpInfo(RequestGroup requestGroup);
        /// <summary>
        /// Delete group
        /// </summary>
        /// <remarks>
        /// グループの削除
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID"></param>
        /// <returns></returns>
        void DeleteGroup(Guid groupID);

        /// <summary>
        /// Delete group
        /// </summary>
        /// <remarks>
        /// グループの削除
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteGroupWithHttpInfo(Guid groupID);
        /// <summary>
        /// 自分しか削除出来ない。open&#x3D;true
        /// </summary>
        /// <remarks>
        /// 自分しか削除出来ない。open&#x3D;true
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID"></param>
        /// <returns></returns>
        void DeleteMeFromGroup(Guid groupID);

        /// <summary>
        /// 自分しか削除出来ない。open&#x3D;true
        /// </summary>
        /// <remarks>
        /// 自分しか削除出来ない。open&#x3D;true
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteMeFromGroupWithHttpInfo(Guid groupID);
        /// <summary>
        /// 一件取得
        /// </summary>
        /// <remarks>
        /// 一件取得
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID"></param>
        /// <returns>ResponseGroup</returns>
        ResponseGroup GetGroup(Guid groupID);

        /// <summary>
        /// 一件取得
        /// </summary>
        /// <remarks>
        /// 一件取得
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID"></param>
        /// <returns>ApiResponse of ResponseGroup</returns>
        ApiResponse<ResponseGroup> GetGroupWithHttpInfo(Guid groupID);
        /// <summary>
        /// グループを全て取得
        /// </summary>
        /// <remarks>
        /// すべてのグループを取得する
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ResponseGroup&gt;</returns>
        List<ResponseGroup> GetGroups();

        /// <summary>
        /// グループを全て取得
        /// </summary>
        /// <remarks>
        /// すべてのグループを取得する
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ResponseGroup&gt;</returns>
        ApiResponse<List<ResponseGroup>> GetGroupsWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 自分の所属しているグループのIDを返す
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="relation">どのような関係性でユーザーと結びつけるか。 取り得る値は、 admins(ユーザーが管理者), belongs(ユーザーが所属している),  belongs-or-admins(ユーザーが管理者または所属している)  イベントはさらに、attendees(not absent) 値がない場合は、belongs として振る舞う  (optional)</param>
        /// <returns>List&lt;Guid&gt;</returns>
        List<Guid> GetMyGroups(string? relation = default(string?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 自分の所属しているグループのIDを返す
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="relation">どのような関係性でユーザーと結びつけるか。 取り得る値は、 admins(ユーザーが管理者), belongs(ユーザーが所属している),  belongs-or-admins(ユーザーが管理者または所属している)  イベントはさらに、attendees(not absent) 値がない場合は、belongs として振る舞う  (optional)</param>
        /// <returns>ApiResponse of List&lt;Guid&gt;</returns>
        ApiResponse<List<Guid>> GetMyGroupsWithHttpInfo(string? relation = default(string?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ユーザーが所属しているグループのIDを返す
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID"></param>
        /// <param name="relation">どのような関係性でユーザーと結びつけるか。 取り得る値は、 admins(ユーザーが管理者), belongs(ユーザーが所属している),  belongs-or-admins(ユーザーが管理者または所属している)  イベントはさらに、attendees(not absent) 値がない場合は、belongs として振る舞う  (optional)</param>
        /// <returns>List&lt;Guid&gt;</returns>
        List<Guid> GetUserGroups(Guid userID, string? relation = default(string?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ユーザーが所属しているグループのIDを返す
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID"></param>
        /// <param name="relation">どのような関係性でユーザーと結びつけるか。 取り得る値は、 admins(ユーザーが管理者), belongs(ユーザーが所属している),  belongs-or-admins(ユーザーが管理者または所属している)  イベントはさらに、attendees(not absent) 値がない場合は、belongs として振る舞う  (optional)</param>
        /// <returns>ApiResponse of List&lt;Guid&gt;</returns>
        ApiResponse<List<Guid>> GetUserGroupsWithHttpInfo(Guid userID, string? relation = default(string?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// adminsのみ変更可能
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID"></param>
        /// <param name="requestGroup">グループの追加</param>
        /// <returns>ResponseGroup</returns>
        ResponseGroup UpdateGroup(Guid groupID, RequestGroup requestGroup);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// adminsのみ変更可能
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID"></param>
        /// <param name="requestGroup">グループの追加</param>
        /// <returns>ApiResponse of ResponseGroup</returns>
        ApiResponse<ResponseGroup> UpdateGroupWithHttpInfo(Guid groupID, RequestGroup requestGroup);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGroupsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 自分を追加。open&#x3D;true
        /// </summary>
        /// <remarks>
        /// 自分をメンバーに追加する
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddMeToGroupAsync(Guid groupID, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 自分を追加。open&#x3D;true
        /// </summary>
        /// <remarks>
        /// 自分をメンバーに追加する
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddMeToGroupWithHttpInfoAsync(Guid groupID, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// グループ作成
        /// </summary>
        /// <remarks>
        /// グループを作成します。traQのグループとは無関係です。
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestGroup">グループの追加</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResponseGroup</returns>
        System.Threading.Tasks.Task<ResponseGroup> CreateGroupAsync(RequestGroup requestGroup, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// グループ作成
        /// </summary>
        /// <remarks>
        /// グループを作成します。traQのグループとは無関係です。
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestGroup">グループの追加</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResponseGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseGroup>> CreateGroupWithHttpInfoAsync(RequestGroup requestGroup, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Delete group
        /// </summary>
        /// <remarks>
        /// グループの削除
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteGroupAsync(Guid groupID, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Delete group
        /// </summary>
        /// <remarks>
        /// グループの削除
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteGroupWithHttpInfoAsync(Guid groupID, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 自分しか削除出来ない。open&#x3D;true
        /// </summary>
        /// <remarks>
        /// 自分しか削除出来ない。open&#x3D;true
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteMeFromGroupAsync(Guid groupID, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 自分しか削除出来ない。open&#x3D;true
        /// </summary>
        /// <remarks>
        /// 自分しか削除出来ない。open&#x3D;true
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteMeFromGroupWithHttpInfoAsync(Guid groupID, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 一件取得
        /// </summary>
        /// <remarks>
        /// 一件取得
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResponseGroup</returns>
        System.Threading.Tasks.Task<ResponseGroup> GetGroupAsync(Guid groupID, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 一件取得
        /// </summary>
        /// <remarks>
        /// 一件取得
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResponseGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseGroup>> GetGroupWithHttpInfoAsync(Guid groupID, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// グループを全て取得
        /// </summary>
        /// <remarks>
        /// すべてのグループを取得する
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ResponseGroup&gt;</returns>
        System.Threading.Tasks.Task<List<ResponseGroup>> GetGroupsAsync(System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// グループを全て取得
        /// </summary>
        /// <remarks>
        /// すべてのグループを取得する
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ResponseGroup&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ResponseGroup>>> GetGroupsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 自分の所属しているグループのIDを返す
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="relation">どのような関係性でユーザーと結びつけるか。 取り得る値は、 admins(ユーザーが管理者), belongs(ユーザーが所属している),  belongs-or-admins(ユーザーが管理者または所属している)  イベントはさらに、attendees(not absent) 値がない場合は、belongs として振る舞う  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Guid&gt;</returns>
        System.Threading.Tasks.Task<List<Guid>> GetMyGroupsAsync(string? relation = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 自分の所属しているグループのIDを返す
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="relation">どのような関係性でユーザーと結びつけるか。 取り得る値は、 admins(ユーザーが管理者), belongs(ユーザーが所属している),  belongs-or-admins(ユーザーが管理者または所属している)  イベントはさらに、attendees(not absent) 値がない場合は、belongs として振る舞う  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Guid&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Guid>>> GetMyGroupsWithHttpInfoAsync(string? relation = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ユーザーが所属しているグループのIDを返す
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID"></param>
        /// <param name="relation">どのような関係性でユーザーと結びつけるか。 取り得る値は、 admins(ユーザーが管理者), belongs(ユーザーが所属している),  belongs-or-admins(ユーザーが管理者または所属している)  イベントはさらに、attendees(not absent) 値がない場合は、belongs として振る舞う  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Guid&gt;</returns>
        System.Threading.Tasks.Task<List<Guid>> GetUserGroupsAsync(Guid userID, string? relation = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ユーザーが所属しているグループのIDを返す
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID"></param>
        /// <param name="relation">どのような関係性でユーザーと結びつけるか。 取り得る値は、 admins(ユーザーが管理者), belongs(ユーザーが所属している),  belongs-or-admins(ユーザーが管理者または所属している)  イベントはさらに、attendees(not absent) 値がない場合は、belongs として振る舞う  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Guid&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Guid>>> GetUserGroupsWithHttpInfoAsync(Guid userID, string? relation = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// adminsのみ変更可能
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID"></param>
        /// <param name="requestGroup">グループの追加</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResponseGroup</returns>
        System.Threading.Tasks.Task<ResponseGroup> UpdateGroupAsync(Guid groupID, RequestGroup requestGroup, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// adminsのみ変更可能
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID"></param>
        /// <param name="requestGroup">グループの追加</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResponseGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseGroup>> UpdateGroupWithHttpInfoAsync(Guid groupID, RequestGroup requestGroup, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGroupsApi : IGroupsApiSync, IGroupsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class GroupsApi : IDisposable, IGroupsApi
    {
        private Knoq.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public GroupsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public GroupsApi(string basePath)
        {
            this.Configuration = Knoq.Client.Configuration.MergeConfigurations(
                Knoq.Client.GlobalConfiguration.Instance,
                new Knoq.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Knoq.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Knoq.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupsApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public GroupsApi(Knoq.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Knoq.Client.Configuration.MergeConfigurations(
                Knoq.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Knoq.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Knoq.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupsApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public GroupsApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupsApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public GroupsApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Knoq.Client.Configuration.MergeConfigurations(
                Knoq.Client.GlobalConfiguration.Instance,
                new Knoq.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Knoq.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Knoq.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupsApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public GroupsApi(HttpClient client, Knoq.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Knoq.Client.Configuration.MergeConfigurations(
                Knoq.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Knoq.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Knoq.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public GroupsApi(Knoq.Client.ISynchronousClient client, Knoq.Client.IAsynchronousClient asyncClient, Knoq.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Knoq.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public Knoq.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Knoq.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Knoq.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Knoq.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Knoq.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// 自分を追加。open&#x3D;true 自分をメンバーに追加する
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID"></param>
        /// <returns></returns>
        public void AddMeToGroup(Guid groupID)
        {
            AddMeToGroupWithHttpInfo(groupID);
        }

        /// <summary>
        /// 自分を追加。open&#x3D;true 自分をメンバーに追加する
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Knoq.Client.ApiResponse<Object> AddMeToGroupWithHttpInfo(Guid groupID)
        {
            Knoq.Client.RequestOptions localVarRequestOptions = new Knoq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Knoq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Knoq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("groupID", Knoq.Client.ClientUtils.ParameterToString(groupID)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/groups/{groupID}/members/me", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddMeToGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 自分を追加。open&#x3D;true 自分をメンバーに追加する
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddMeToGroupAsync(Guid groupID, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await AddMeToGroupWithHttpInfoAsync(groupID, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// 自分を追加。open&#x3D;true 自分をメンバーに追加する
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Knoq.Client.ApiResponse<Object>> AddMeToGroupWithHttpInfoAsync(Guid groupID, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Knoq.Client.RequestOptions localVarRequestOptions = new Knoq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = Knoq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Knoq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("groupID", Knoq.Client.ClientUtils.ParameterToString(groupID)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/groups/{groupID}/members/me", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddMeToGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// グループ作成 グループを作成します。traQのグループとは無関係です。
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestGroup">グループの追加</param>
        /// <returns>ResponseGroup</returns>
        public ResponseGroup CreateGroup(RequestGroup requestGroup)
        {
            Knoq.Client.ApiResponse<ResponseGroup> localVarResponse = CreateGroupWithHttpInfo(requestGroup);
            return localVarResponse.Data;
        }

        /// <summary>
        /// グループ作成 グループを作成します。traQのグループとは無関係です。
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestGroup">グループの追加</param>
        /// <returns>ApiResponse of ResponseGroup</returns>
        public Knoq.Client.ApiResponse<ResponseGroup> CreateGroupWithHttpInfo(RequestGroup requestGroup)
        {
            // verify the required parameter 'requestGroup' is set
            if (requestGroup == null)
                throw new Knoq.Client.ApiException(400, "Missing required parameter 'requestGroup' when calling GroupsApi->CreateGroup");

            Knoq.Client.RequestOptions localVarRequestOptions = new Knoq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knoq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Knoq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = requestGroup;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ResponseGroup>("/groups", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// グループ作成 グループを作成します。traQのグループとは無関係です。
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestGroup">グループの追加</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResponseGroup</returns>
        public async System.Threading.Tasks.Task<ResponseGroup> CreateGroupAsync(RequestGroup requestGroup, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Knoq.Client.ApiResponse<ResponseGroup> localVarResponse = await CreateGroupWithHttpInfoAsync(requestGroup, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// グループ作成 グループを作成します。traQのグループとは無関係です。
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestGroup">グループの追加</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResponseGroup)</returns>
        public async System.Threading.Tasks.Task<Knoq.Client.ApiResponse<ResponseGroup>> CreateGroupWithHttpInfoAsync(RequestGroup requestGroup, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'requestGroup' is set
            if (requestGroup == null)
                throw new Knoq.Client.ApiException(400, "Missing required parameter 'requestGroup' when calling GroupsApi->CreateGroup");


            Knoq.Client.RequestOptions localVarRequestOptions = new Knoq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Knoq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Knoq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = requestGroup;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ResponseGroup>("/groups", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete group グループの削除
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID"></param>
        /// <returns></returns>
        public void DeleteGroup(Guid groupID)
        {
            DeleteGroupWithHttpInfo(groupID);
        }

        /// <summary>
        /// Delete group グループの削除
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Knoq.Client.ApiResponse<Object> DeleteGroupWithHttpInfo(Guid groupID)
        {
            Knoq.Client.RequestOptions localVarRequestOptions = new Knoq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Knoq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Knoq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("groupID", Knoq.Client.ClientUtils.ParameterToString(groupID)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/groups/{groupID}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete group グループの削除
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteGroupAsync(Guid groupID, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await DeleteGroupWithHttpInfoAsync(groupID, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete group グループの削除
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Knoq.Client.ApiResponse<Object>> DeleteGroupWithHttpInfoAsync(Guid groupID, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Knoq.Client.RequestOptions localVarRequestOptions = new Knoq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = Knoq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Knoq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("groupID", Knoq.Client.ClientUtils.ParameterToString(groupID)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/groups/{groupID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 自分しか削除出来ない。open&#x3D;true 自分しか削除出来ない。open&#x3D;true
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID"></param>
        /// <returns></returns>
        public void DeleteMeFromGroup(Guid groupID)
        {
            DeleteMeFromGroupWithHttpInfo(groupID);
        }

        /// <summary>
        /// 自分しか削除出来ない。open&#x3D;true 自分しか削除出来ない。open&#x3D;true
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Knoq.Client.ApiResponse<Object> DeleteMeFromGroupWithHttpInfo(Guid groupID)
        {
            Knoq.Client.RequestOptions localVarRequestOptions = new Knoq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Knoq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Knoq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("groupID", Knoq.Client.ClientUtils.ParameterToString(groupID)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/groups/{groupID}/members/me", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteMeFromGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 自分しか削除出来ない。open&#x3D;true 自分しか削除出来ない。open&#x3D;true
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteMeFromGroupAsync(Guid groupID, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await DeleteMeFromGroupWithHttpInfoAsync(groupID, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// 自分しか削除出来ない。open&#x3D;true 自分しか削除出来ない。open&#x3D;true
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Knoq.Client.ApiResponse<Object>> DeleteMeFromGroupWithHttpInfoAsync(Guid groupID, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Knoq.Client.RequestOptions localVarRequestOptions = new Knoq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = Knoq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Knoq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("groupID", Knoq.Client.ClientUtils.ParameterToString(groupID)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/groups/{groupID}/members/me", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteMeFromGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 一件取得 一件取得
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID"></param>
        /// <returns>ResponseGroup</returns>
        public ResponseGroup GetGroup(Guid groupID)
        {
            Knoq.Client.ApiResponse<ResponseGroup> localVarResponse = GetGroupWithHttpInfo(groupID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 一件取得 一件取得
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID"></param>
        /// <returns>ApiResponse of ResponseGroup</returns>
        public Knoq.Client.ApiResponse<ResponseGroup> GetGroupWithHttpInfo(Guid groupID)
        {
            Knoq.Client.RequestOptions localVarRequestOptions = new Knoq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knoq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Knoq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("groupID", Knoq.Client.ClientUtils.ParameterToString(groupID)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<ResponseGroup>("/groups/{groupID}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 一件取得 一件取得
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResponseGroup</returns>
        public async System.Threading.Tasks.Task<ResponseGroup> GetGroupAsync(Guid groupID, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Knoq.Client.ApiResponse<ResponseGroup> localVarResponse = await GetGroupWithHttpInfoAsync(groupID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 一件取得 一件取得
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResponseGroup)</returns>
        public async System.Threading.Tasks.Task<Knoq.Client.ApiResponse<ResponseGroup>> GetGroupWithHttpInfoAsync(Guid groupID, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Knoq.Client.RequestOptions localVarRequestOptions = new Knoq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Knoq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Knoq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("groupID", Knoq.Client.ClientUtils.ParameterToString(groupID)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ResponseGroup>("/groups/{groupID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// グループを全て取得 すべてのグループを取得する
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ResponseGroup&gt;</returns>
        public List<ResponseGroup> GetGroups()
        {
            Knoq.Client.ApiResponse<List<ResponseGroup>> localVarResponse = GetGroupsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// グループを全て取得 すべてのグループを取得する
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ResponseGroup&gt;</returns>
        public Knoq.Client.ApiResponse<List<ResponseGroup>> GetGroupsWithHttpInfo()
        {
            Knoq.Client.RequestOptions localVarRequestOptions = new Knoq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knoq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Knoq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ResponseGroup>>("/groups", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGroups", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// グループを全て取得 すべてのグループを取得する
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ResponseGroup&gt;</returns>
        public async System.Threading.Tasks.Task<List<ResponseGroup>> GetGroupsAsync(System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Knoq.Client.ApiResponse<List<ResponseGroup>> localVarResponse = await GetGroupsWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// グループを全て取得 すべてのグループを取得する
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ResponseGroup&gt;)</returns>
        public async System.Threading.Tasks.Task<Knoq.Client.ApiResponse<List<ResponseGroup>>> GetGroupsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Knoq.Client.RequestOptions localVarRequestOptions = new Knoq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Knoq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Knoq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ResponseGroup>>("/groups", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGroups", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  自分の所属しているグループのIDを返す
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="relation">どのような関係性でユーザーと結びつけるか。 取り得る値は、 admins(ユーザーが管理者), belongs(ユーザーが所属している),  belongs-or-admins(ユーザーが管理者または所属している)  イベントはさらに、attendees(not absent) 値がない場合は、belongs として振る舞う  (optional)</param>
        /// <returns>List&lt;Guid&gt;</returns>
        public List<Guid> GetMyGroups(string? relation = default(string?))
        {
            Knoq.Client.ApiResponse<List<Guid>> localVarResponse = GetMyGroupsWithHttpInfo(relation);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  自分の所属しているグループのIDを返す
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="relation">どのような関係性でユーザーと結びつけるか。 取り得る値は、 admins(ユーザーが管理者), belongs(ユーザーが所属している),  belongs-or-admins(ユーザーが管理者または所属している)  イベントはさらに、attendees(not absent) 値がない場合は、belongs として振る舞う  (optional)</param>
        /// <returns>ApiResponse of List&lt;Guid&gt;</returns>
        public Knoq.Client.ApiResponse<List<Guid>> GetMyGroupsWithHttpInfo(string? relation = default(string?))
        {
            Knoq.Client.RequestOptions localVarRequestOptions = new Knoq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knoq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Knoq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (relation != null)
            {
                localVarRequestOptions.QueryParameters.Add(Knoq.Client.ClientUtils.ParameterToMultiMap("", "relation", relation));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Guid>>("/users/me/groups", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMyGroups", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  自分の所属しているグループのIDを返す
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="relation">どのような関係性でユーザーと結びつけるか。 取り得る値は、 admins(ユーザーが管理者), belongs(ユーザーが所属している),  belongs-or-admins(ユーザーが管理者または所属している)  イベントはさらに、attendees(not absent) 値がない場合は、belongs として振る舞う  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Guid&gt;</returns>
        public async System.Threading.Tasks.Task<List<Guid>> GetMyGroupsAsync(string? relation = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Knoq.Client.ApiResponse<List<Guid>> localVarResponse = await GetMyGroupsWithHttpInfoAsync(relation, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  自分の所属しているグループのIDを返す
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="relation">どのような関係性でユーザーと結びつけるか。 取り得る値は、 admins(ユーザーが管理者), belongs(ユーザーが所属している),  belongs-or-admins(ユーザーが管理者または所属している)  イベントはさらに、attendees(not absent) 値がない場合は、belongs として振る舞う  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Guid&gt;)</returns>
        public async System.Threading.Tasks.Task<Knoq.Client.ApiResponse<List<Guid>>> GetMyGroupsWithHttpInfoAsync(string? relation = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Knoq.Client.RequestOptions localVarRequestOptions = new Knoq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Knoq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Knoq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (relation != null)
            {
                localVarRequestOptions.QueryParameters.Add(Knoq.Client.ClientUtils.ParameterToMultiMap("", "relation", relation));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Guid>>("/users/me/groups", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMyGroups", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ユーザーが所属しているグループのIDを返す
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID"></param>
        /// <param name="relation">どのような関係性でユーザーと結びつけるか。 取り得る値は、 admins(ユーザーが管理者), belongs(ユーザーが所属している),  belongs-or-admins(ユーザーが管理者または所属している)  イベントはさらに、attendees(not absent) 値がない場合は、belongs として振る舞う  (optional)</param>
        /// <returns>List&lt;Guid&gt;</returns>
        public List<Guid> GetUserGroups(Guid userID, string? relation = default(string?))
        {
            Knoq.Client.ApiResponse<List<Guid>> localVarResponse = GetUserGroupsWithHttpInfo(userID, relation);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ユーザーが所属しているグループのIDを返す
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID"></param>
        /// <param name="relation">どのような関係性でユーザーと結びつけるか。 取り得る値は、 admins(ユーザーが管理者), belongs(ユーザーが所属している),  belongs-or-admins(ユーザーが管理者または所属している)  イベントはさらに、attendees(not absent) 値がない場合は、belongs として振る舞う  (optional)</param>
        /// <returns>ApiResponse of List&lt;Guid&gt;</returns>
        public Knoq.Client.ApiResponse<List<Guid>> GetUserGroupsWithHttpInfo(Guid userID, string? relation = default(string?))
        {
            Knoq.Client.RequestOptions localVarRequestOptions = new Knoq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knoq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Knoq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("userID", Knoq.Client.ClientUtils.ParameterToString(userID)); // path parameter
            if (relation != null)
            {
                localVarRequestOptions.QueryParameters.Add(Knoq.Client.ClientUtils.ParameterToMultiMap("", "relation", relation));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Guid>>("/users/{userID}/groups", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserGroups", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ユーザーが所属しているグループのIDを返す
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID"></param>
        /// <param name="relation">どのような関係性でユーザーと結びつけるか。 取り得る値は、 admins(ユーザーが管理者), belongs(ユーザーが所属している),  belongs-or-admins(ユーザーが管理者または所属している)  イベントはさらに、attendees(not absent) 値がない場合は、belongs として振る舞う  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Guid&gt;</returns>
        public async System.Threading.Tasks.Task<List<Guid>> GetUserGroupsAsync(Guid userID, string? relation = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Knoq.Client.ApiResponse<List<Guid>> localVarResponse = await GetUserGroupsWithHttpInfoAsync(userID, relation, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ユーザーが所属しているグループのIDを返す
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID"></param>
        /// <param name="relation">どのような関係性でユーザーと結びつけるか。 取り得る値は、 admins(ユーザーが管理者), belongs(ユーザーが所属している),  belongs-or-admins(ユーザーが管理者または所属している)  イベントはさらに、attendees(not absent) 値がない場合は、belongs として振る舞う  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Guid&gt;)</returns>
        public async System.Threading.Tasks.Task<Knoq.Client.ApiResponse<List<Guid>>> GetUserGroupsWithHttpInfoAsync(Guid userID, string? relation = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Knoq.Client.RequestOptions localVarRequestOptions = new Knoq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Knoq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Knoq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("userID", Knoq.Client.ClientUtils.ParameterToString(userID)); // path parameter
            if (relation != null)
            {
                localVarRequestOptions.QueryParameters.Add(Knoq.Client.ClientUtils.ParameterToMultiMap("", "relation", relation));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Guid>>("/users/{userID}/groups", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserGroups", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  adminsのみ変更可能
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID"></param>
        /// <param name="requestGroup">グループの追加</param>
        /// <returns>ResponseGroup</returns>
        public ResponseGroup UpdateGroup(Guid groupID, RequestGroup requestGroup)
        {
            Knoq.Client.ApiResponse<ResponseGroup> localVarResponse = UpdateGroupWithHttpInfo(groupID, requestGroup);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  adminsのみ変更可能
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID"></param>
        /// <param name="requestGroup">グループの追加</param>
        /// <returns>ApiResponse of ResponseGroup</returns>
        public Knoq.Client.ApiResponse<ResponseGroup> UpdateGroupWithHttpInfo(Guid groupID, RequestGroup requestGroup)
        {
            // verify the required parameter 'requestGroup' is set
            if (requestGroup == null)
                throw new Knoq.Client.ApiException(400, "Missing required parameter 'requestGroup' when calling GroupsApi->UpdateGroup");

            Knoq.Client.RequestOptions localVarRequestOptions = new Knoq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knoq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Knoq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("groupID", Knoq.Client.ClientUtils.ParameterToString(groupID)); // path parameter
            localVarRequestOptions.Data = requestGroup;


            // make the HTTP request
            var localVarResponse = this.Client.Put<ResponseGroup>("/groups/{groupID}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  adminsのみ変更可能
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID"></param>
        /// <param name="requestGroup">グループの追加</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResponseGroup</returns>
        public async System.Threading.Tasks.Task<ResponseGroup> UpdateGroupAsync(Guid groupID, RequestGroup requestGroup, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Knoq.Client.ApiResponse<ResponseGroup> localVarResponse = await UpdateGroupWithHttpInfoAsync(groupID, requestGroup, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  adminsのみ変更可能
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID"></param>
        /// <param name="requestGroup">グループの追加</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResponseGroup)</returns>
        public async System.Threading.Tasks.Task<Knoq.Client.ApiResponse<ResponseGroup>> UpdateGroupWithHttpInfoAsync(Guid groupID, RequestGroup requestGroup, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'requestGroup' is set
            if (requestGroup == null)
                throw new Knoq.Client.ApiException(400, "Missing required parameter 'requestGroup' when calling GroupsApi->UpdateGroup");


            Knoq.Client.RequestOptions localVarRequestOptions = new Knoq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Knoq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Knoq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("groupID", Knoq.Client.ClientUtils.ParameterToString(groupID)); // path parameter
            localVarRequestOptions.Data = requestGroup;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<ResponseGroup>("/groups/{groupID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
