/*
 * traP knoQ
 *
 * This is a sample knoQ server. 
 *
 * The version of the OpenAPI document: 2.1.5
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using Knoq.Client;
using Knoq.Model;

namespace Knoq.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUsersApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// /ical で使う&#x60;secret&#x60;を取得
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>IcalSecret</returns>
        IcalSecret GetIcalSecret();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// /ical で使う&#x60;secret&#x60;を取得
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of IcalSecret</returns>
        ApiResponse<IcalSecret> GetIcalSecretWithHttpInfo();
        /// <summary>
        /// 自分のユーザー情報を取得
        /// </summary>
        /// <remarks>
        /// 自分のユーザー情報を取得
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ResponseUser</returns>
        ResponseUser GetMe();

        /// <summary>
        /// 自分のユーザー情報を取得
        /// </summary>
        /// <remarks>
        /// 自分のユーザー情報を取得
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ResponseUser</returns>
        ApiResponse<ResponseUser> GetMeWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ユーザー一覧を返す
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeSuspended">アカウントがアクティブでないユーザーを含めるかどうか。 | traQ由来のquery。 | de (optional)</param>
        /// <returns>List&lt;ResponseUser&gt;</returns>
        List<ResponseUser> GetUsers(bool? includeSuspended = default(bool?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ユーザー一覧を返す
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeSuspended">アカウントがアクティブでないユーザーを含めるかどうか。 | traQ由来のquery。 | de (optional)</param>
        /// <returns>ApiResponse of List&lt;ResponseUser&gt;</returns>
        ApiResponse<List<ResponseUser>> GetUsersWithHttpInfo(bool? includeSuspended = default(bool?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 管理者権限を付与したいuserのuserIDをパラメータに入れる. APIを叩く本人が管理者権限を持っている必要がある.
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID"></param>
        /// <returns></returns>
        void GrantPrivilege(Guid userID);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 管理者権限を付与したいuserのuserIDをパラメータに入れる. APIを叩く本人が管理者権限を持っている必要がある.
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GrantPrivilegeWithHttpInfo(Guid userID);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// /ical で使う&#x60;secret&#x60;を再生成
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>IcalSecret</returns>
        IcalSecret ResetIcalSecret();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// /ical で使う&#x60;secret&#x60;を再生成
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of IcalSecret</returns>
        ApiResponse<IcalSecret> ResetIcalSecretWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 管理者権限が必要。 traQのuserと同期します。 存在していないユーザーは作成されます。 stateが同期されます。
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void SyncUsers();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 管理者権限が必要。 traQのuserと同期します。 存在していないユーザーは作成されます。 stateが同期されます。
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SyncUsersWithHttpInfo();
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUsersApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// /ical で使う&#x60;secret&#x60;を取得
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IcalSecret</returns>
        System.Threading.Tasks.Task<IcalSecret> GetIcalSecretAsync(System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// /ical で使う&#x60;secret&#x60;を取得
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IcalSecret)</returns>
        System.Threading.Tasks.Task<ApiResponse<IcalSecret>> GetIcalSecretWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 自分のユーザー情報を取得
        /// </summary>
        /// <remarks>
        /// 自分のユーザー情報を取得
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResponseUser</returns>
        System.Threading.Tasks.Task<ResponseUser> GetMeAsync(System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 自分のユーザー情報を取得
        /// </summary>
        /// <remarks>
        /// 自分のユーザー情報を取得
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResponseUser)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseUser>> GetMeWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ユーザー一覧を返す
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeSuspended">アカウントがアクティブでないユーザーを含めるかどうか。 | traQ由来のquery。 | de (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ResponseUser&gt;</returns>
        System.Threading.Tasks.Task<List<ResponseUser>> GetUsersAsync(bool? includeSuspended = default(bool?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ユーザー一覧を返す
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeSuspended">アカウントがアクティブでないユーザーを含めるかどうか。 | traQ由来のquery。 | de (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ResponseUser&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ResponseUser>>> GetUsersWithHttpInfoAsync(bool? includeSuspended = default(bool?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 管理者権限を付与したいuserのuserIDをパラメータに入れる. APIを叩く本人が管理者権限を持っている必要がある.
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GrantPrivilegeAsync(Guid userID, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 管理者権限を付与したいuserのuserIDをパラメータに入れる. APIを叩く本人が管理者権限を持っている必要がある.
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GrantPrivilegeWithHttpInfoAsync(Guid userID, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// /ical で使う&#x60;secret&#x60;を再生成
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IcalSecret</returns>
        System.Threading.Tasks.Task<IcalSecret> ResetIcalSecretAsync(System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// /ical で使う&#x60;secret&#x60;を再生成
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IcalSecret)</returns>
        System.Threading.Tasks.Task<ApiResponse<IcalSecret>> ResetIcalSecretWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 管理者権限が必要。 traQのuserと同期します。 存在していないユーザーは作成されます。 stateが同期されます。
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SyncUsersAsync(System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 管理者権限が必要。 traQのuserと同期します。 存在していないユーザーは作成されます。 stateが同期されます。
        /// </remarks>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SyncUsersWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUsersApi : IUsersApiSync, IUsersApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UsersApi : IDisposable, IUsersApi
    {
        private Knoq.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public UsersApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public UsersApi(string basePath)
        {
            this.Configuration = Knoq.Client.Configuration.MergeConfigurations(
                Knoq.Client.GlobalConfiguration.Instance,
                new Knoq.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Knoq.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Knoq.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public UsersApi(Knoq.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Knoq.Client.Configuration.MergeConfigurations(
                Knoq.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Knoq.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Knoq.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public UsersApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public UsersApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Knoq.Client.Configuration.MergeConfigurations(
                Knoq.Client.GlobalConfiguration.Instance,
                new Knoq.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Knoq.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Knoq.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public UsersApi(HttpClient client, Knoq.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Knoq.Client.Configuration.MergeConfigurations(
                Knoq.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Knoq.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Knoq.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public UsersApi(Knoq.Client.ISynchronousClient client, Knoq.Client.IAsynchronousClient asyncClient, Knoq.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Knoq.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public Knoq.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Knoq.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Knoq.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Knoq.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Knoq.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  /ical で使う&#x60;secret&#x60;を取得
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>IcalSecret</returns>
        public IcalSecret GetIcalSecret()
        {
            Knoq.Client.ApiResponse<IcalSecret> localVarResponse = GetIcalSecretWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  /ical で使う&#x60;secret&#x60;を取得
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of IcalSecret</returns>
        public Knoq.Client.ApiResponse<IcalSecret> GetIcalSecretWithHttpInfo()
        {
            Knoq.Client.RequestOptions localVarRequestOptions = new Knoq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knoq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Knoq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<IcalSecret>("/users/me/ical", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIcalSecret", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  /ical で使う&#x60;secret&#x60;を取得
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IcalSecret</returns>
        public async System.Threading.Tasks.Task<IcalSecret> GetIcalSecretAsync(System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Knoq.Client.ApiResponse<IcalSecret> localVarResponse = await GetIcalSecretWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  /ical で使う&#x60;secret&#x60;を取得
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IcalSecret)</returns>
        public async System.Threading.Tasks.Task<Knoq.Client.ApiResponse<IcalSecret>> GetIcalSecretWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Knoq.Client.RequestOptions localVarRequestOptions = new Knoq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Knoq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Knoq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<IcalSecret>("/users/me/ical", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIcalSecret", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 自分のユーザー情報を取得 自分のユーザー情報を取得
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ResponseUser</returns>
        public ResponseUser GetMe()
        {
            Knoq.Client.ApiResponse<ResponseUser> localVarResponse = GetMeWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// 自分のユーザー情報を取得 自分のユーザー情報を取得
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ResponseUser</returns>
        public Knoq.Client.ApiResponse<ResponseUser> GetMeWithHttpInfo()
        {
            Knoq.Client.RequestOptions localVarRequestOptions = new Knoq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knoq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Knoq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<ResponseUser>("/users/me", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMe", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 自分のユーザー情報を取得 自分のユーザー情報を取得
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResponseUser</returns>
        public async System.Threading.Tasks.Task<ResponseUser> GetMeAsync(System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Knoq.Client.ApiResponse<ResponseUser> localVarResponse = await GetMeWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 自分のユーザー情報を取得 自分のユーザー情報を取得
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResponseUser)</returns>
        public async System.Threading.Tasks.Task<Knoq.Client.ApiResponse<ResponseUser>> GetMeWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Knoq.Client.RequestOptions localVarRequestOptions = new Knoq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Knoq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Knoq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ResponseUser>("/users/me", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMe", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ユーザー一覧を返す
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeSuspended">アカウントがアクティブでないユーザーを含めるかどうか。 | traQ由来のquery。 | de (optional)</param>
        /// <returns>List&lt;ResponseUser&gt;</returns>
        public List<ResponseUser> GetUsers(bool? includeSuspended = default(bool?))
        {
            Knoq.Client.ApiResponse<List<ResponseUser>> localVarResponse = GetUsersWithHttpInfo(includeSuspended);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ユーザー一覧を返す
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeSuspended">アカウントがアクティブでないユーザーを含めるかどうか。 | traQ由来のquery。 | de (optional)</param>
        /// <returns>ApiResponse of List&lt;ResponseUser&gt;</returns>
        public Knoq.Client.ApiResponse<List<ResponseUser>> GetUsersWithHttpInfo(bool? includeSuspended = default(bool?))
        {
            Knoq.Client.RequestOptions localVarRequestOptions = new Knoq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knoq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Knoq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (includeSuspended != null)
            {
                localVarRequestOptions.QueryParameters.Add(Knoq.Client.ClientUtils.ParameterToMultiMap("", "include-suspended", includeSuspended));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ResponseUser>>("/users", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUsers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ユーザー一覧を返す
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeSuspended">アカウントがアクティブでないユーザーを含めるかどうか。 | traQ由来のquery。 | de (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ResponseUser&gt;</returns>
        public async System.Threading.Tasks.Task<List<ResponseUser>> GetUsersAsync(bool? includeSuspended = default(bool?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Knoq.Client.ApiResponse<List<ResponseUser>> localVarResponse = await GetUsersWithHttpInfoAsync(includeSuspended, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ユーザー一覧を返す
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeSuspended">アカウントがアクティブでないユーザーを含めるかどうか。 | traQ由来のquery。 | de (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ResponseUser&gt;)</returns>
        public async System.Threading.Tasks.Task<Knoq.Client.ApiResponse<List<ResponseUser>>> GetUsersWithHttpInfoAsync(bool? includeSuspended = default(bool?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Knoq.Client.RequestOptions localVarRequestOptions = new Knoq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Knoq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Knoq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (includeSuspended != null)
            {
                localVarRequestOptions.QueryParameters.Add(Knoq.Client.ClientUtils.ParameterToMultiMap("", "include-suspended", includeSuspended));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ResponseUser>>("/users", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUsers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  管理者権限を付与したいuserのuserIDをパラメータに入れる. APIを叩く本人が管理者権限を持っている必要がある.
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID"></param>
        /// <returns></returns>
        public void GrantPrivilege(Guid userID)
        {
            GrantPrivilegeWithHttpInfo(userID);
        }

        /// <summary>
        ///  管理者権限を付与したいuserのuserIDをパラメータに入れる. APIを叩く本人が管理者権限を持っている必要がある.
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Knoq.Client.ApiResponse<Object> GrantPrivilegeWithHttpInfo(Guid userID)
        {
            Knoq.Client.RequestOptions localVarRequestOptions = new Knoq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Knoq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Knoq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("userID", Knoq.Client.ClientUtils.ParameterToString(userID)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Patch<Object>("/users/{userID}/privileged", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GrantPrivilege", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  管理者権限を付与したいuserのuserIDをパラメータに入れる. APIを叩く本人が管理者権限を持っている必要がある.
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GrantPrivilegeAsync(Guid userID, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await GrantPrivilegeWithHttpInfoAsync(userID, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  管理者権限を付与したいuserのuserIDをパラメータに入れる. APIを叩く本人が管理者権限を持っている必要がある.
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Knoq.Client.ApiResponse<Object>> GrantPrivilegeWithHttpInfoAsync(Guid userID, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Knoq.Client.RequestOptions localVarRequestOptions = new Knoq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = Knoq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Knoq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("userID", Knoq.Client.ClientUtils.ParameterToString(userID)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<Object>("/users/{userID}/privileged", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GrantPrivilege", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  /ical で使う&#x60;secret&#x60;を再生成
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>IcalSecret</returns>
        public IcalSecret ResetIcalSecret()
        {
            Knoq.Client.ApiResponse<IcalSecret> localVarResponse = ResetIcalSecretWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  /ical で使う&#x60;secret&#x60;を再生成
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of IcalSecret</returns>
        public Knoq.Client.ApiResponse<IcalSecret> ResetIcalSecretWithHttpInfo()
        {
            Knoq.Client.RequestOptions localVarRequestOptions = new Knoq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knoq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Knoq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Put<IcalSecret>("/users/me/ical", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResetIcalSecret", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  /ical で使う&#x60;secret&#x60;を再生成
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IcalSecret</returns>
        public async System.Threading.Tasks.Task<IcalSecret> ResetIcalSecretAsync(System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Knoq.Client.ApiResponse<IcalSecret> localVarResponse = await ResetIcalSecretWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  /ical で使う&#x60;secret&#x60;を再生成
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IcalSecret)</returns>
        public async System.Threading.Tasks.Task<Knoq.Client.ApiResponse<IcalSecret>> ResetIcalSecretWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Knoq.Client.RequestOptions localVarRequestOptions = new Knoq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Knoq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Knoq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<IcalSecret>("/users/me/ical", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResetIcalSecret", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  管理者権限が必要。 traQのuserと同期します。 存在していないユーザーは作成されます。 stateが同期されます。
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void SyncUsers()
        {
            SyncUsersWithHttpInfo();
        }

        /// <summary>
        ///  管理者権限が必要。 traQのuserと同期します。 存在していないユーザーは作成されます。 stateが同期されます。
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public Knoq.Client.ApiResponse<Object> SyncUsersWithHttpInfo()
        {
            Knoq.Client.RequestOptions localVarRequestOptions = new Knoq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Knoq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Knoq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/users/sync", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SyncUsers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  管理者権限が必要。 traQのuserと同期します。 存在していないユーザーは作成されます。 stateが同期されます。
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SyncUsersAsync(System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await SyncUsersWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  管理者権限が必要。 traQのuserと同期します。 存在していないユーザーは作成されます。 stateが同期されます。
        /// </summary>
        /// <exception cref="Knoq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Knoq.Client.ApiResponse<Object>> SyncUsersWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Knoq.Client.RequestOptions localVarRequestOptions = new Knoq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = Knoq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Knoq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/users/sync", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SyncUsers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
