/*
 * traP knoQ
 *
 * This is a sample knoQ server. 
 *
 * The version of the OpenAPI document: 2.1.5
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Knoq.Client.FileParameter;
using OpenAPIDateConverter = Knoq.Client.OpenAPIDateConverter;

namespace Knoq.Model
{
    /// <summary>
    /// ResponseRoom
    /// </summary>
    [DataContract(Name = "ResponseRoom")]
    public partial class ResponseRoom : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ResponseRoom" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ResponseRoom() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ResponseRoom" /> class.
        /// </summary>
        /// <param name="roomId">roomId (required).</param>
        /// <param name="place">place (required).</param>
        /// <param name="timeStart">timeStart (required).</param>
        /// <param name="timeEnd">timeEnd (required).</param>
        /// <param name="verified">部屋が使えることを保証する (required).</param>
        /// <param name="freeTimes">どのイベントも使用していない時間帯.</param>
        /// <param name="sharedTimes">部屋を共用すれば、使用できる時間帯.</param>
        /// <param name="admins">編集権を持つユーザー (required).</param>
        /// <param name="createdBy">createdBy (required).</param>
        /// <param name="createdAt">createdAt (required).</param>
        /// <param name="updatedAt">updatedAt (required).</param>
        public ResponseRoom(Guid roomId = default, string place = default, string timeStart = default, string timeEnd = default, bool verified = default, List<Duration> freeTimes = default, List<Duration> sharedTimes = default, List<Guid> admins = default, Guid createdBy = default, string createdAt = default, string updatedAt = default)
        {
            this.RoomId = roomId;
            // to ensure "place" is required (not null)
            if (place == null)
            {
                throw new ArgumentNullException("place is a required property for ResponseRoom and cannot be null");
            }
            this.Place = place;
            // to ensure "timeStart" is required (not null)
            if (timeStart == null)
            {
                throw new ArgumentNullException("timeStart is a required property for ResponseRoom and cannot be null");
            }
            this.TimeStart = timeStart;
            // to ensure "timeEnd" is required (not null)
            if (timeEnd == null)
            {
                throw new ArgumentNullException("timeEnd is a required property for ResponseRoom and cannot be null");
            }
            this.TimeEnd = timeEnd;
            this.Verified = verified;
            // to ensure "admins" is required (not null)
            if (admins == null)
            {
                throw new ArgumentNullException("admins is a required property for ResponseRoom and cannot be null");
            }
            this.Admins = admins;
            this.CreatedBy = createdBy;
            // to ensure "createdAt" is required (not null)
            if (createdAt == null)
            {
                throw new ArgumentNullException("createdAt is a required property for ResponseRoom and cannot be null");
            }
            this.CreatedAt = createdAt;
            // to ensure "updatedAt" is required (not null)
            if (updatedAt == null)
            {
                throw new ArgumentNullException("updatedAt is a required property for ResponseRoom and cannot be null");
            }
            this.UpdatedAt = updatedAt;
            this.FreeTimes = freeTimes;
            this.SharedTimes = sharedTimes;
        }

        /// <summary>
        /// Gets or Sets RoomId
        /// </summary>
        [DataMember(Name = "roomId", IsRequired = true, EmitDefaultValue = true)]
        public Guid RoomId { get; set; }

        /// <summary>
        /// Gets or Sets Place
        /// </summary>
        /*
        <example>S516</example>
        */
        [DataMember(Name = "place", IsRequired = true, EmitDefaultValue = true)]
        public string Place { get; set; }

        /// <summary>
        /// Gets or Sets TimeStart
        /// </summary>
        /*
        <example>2006-01-02T15:04:05Z</example>
        */
        [DataMember(Name = "timeStart", IsRequired = true, EmitDefaultValue = true)]
        public string TimeStart { get; set; }

        /// <summary>
        /// Gets or Sets TimeEnd
        /// </summary>
        /*
        <example>2006-01-02T15:04:05Z</example>
        */
        [DataMember(Name = "timeEnd", IsRequired = true, EmitDefaultValue = true)]
        public string TimeEnd { get; set; }

        /// <summary>
        /// 部屋が使えることを保証する
        /// </summary>
        /// <value>部屋が使えることを保証する</value>
        [DataMember(Name = "verified", IsRequired = true, EmitDefaultValue = true)]
        public bool Verified { get; set; }

        /// <summary>
        /// どのイベントも使用していない時間帯
        /// </summary>
        /// <value>どのイベントも使用していない時間帯</value>
        [DataMember(Name = "freeTimes", EmitDefaultValue = false)]
        public List<Duration> FreeTimes { get; set; }

        /// <summary>
        /// 部屋を共用すれば、使用できる時間帯
        /// </summary>
        /// <value>部屋を共用すれば、使用できる時間帯</value>
        [DataMember(Name = "sharedTimes", EmitDefaultValue = false)]
        public List<Duration> SharedTimes { get; set; }

        /// <summary>
        /// 編集権を持つユーザー
        /// </summary>
        /// <value>編集権を持つユーザー</value>
        [DataMember(Name = "admins", IsRequired = true, EmitDefaultValue = true)]
        public List<Guid> Admins { get; set; }

        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name = "createdBy", IsRequired = true, EmitDefaultValue = true)]
        public Guid CreatedBy { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        /*
        <example>2006-01-02T15:04:05Z</example>
        */
        [DataMember(Name = "createdAt", IsRequired = true, EmitDefaultValue = true)]
        public string CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        /*
        <example>2006-01-02T15:04:05Z</example>
        */
        [DataMember(Name = "updatedAt", IsRequired = true, EmitDefaultValue = true)]
        public string UpdatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ResponseRoom {\n");
            sb.Append("  RoomId: ").Append(RoomId).Append("\n");
            sb.Append("  Place: ").Append(Place).Append("\n");
            sb.Append("  TimeStart: ").Append(TimeStart).Append("\n");
            sb.Append("  TimeEnd: ").Append(TimeEnd).Append("\n");
            sb.Append("  Verified: ").Append(Verified).Append("\n");
            sb.Append("  FreeTimes: ").Append(FreeTimes).Append("\n");
            sb.Append("  SharedTimes: ").Append(SharedTimes).Append("\n");
            sb.Append("  Admins: ").Append(Admins).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
