/*
 * traP knoQ
 *
 * This is a sample knoQ server. 
 *
 * The version of the OpenAPI document: 2.1.5
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Knoq.Client.FileParameter;
using OpenAPIDateConverter = Knoq.Client.OpenAPIDateConverter;

namespace Knoq.Model
{
    /// <summary>
    /// ResponseGroup
    /// </summary>
    [DataContract(Name = "ResponseGroup")]
    public partial class ResponseGroup : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ResponseGroup" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ResponseGroup() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ResponseGroup" /> class.
        /// </summary>
        /// <param name="groupId">groupId (required).</param>
        /// <param name="name">name (required).</param>
        /// <param name="description">description (required).</param>
        /// <param name="open">open (required).</param>
        /// <param name="isTraQGroup">isTraQGroup (required).</param>
        /// <param name="members">グループのメンバー (required).</param>
        /// <param name="admins">編集権を持つユーザー (required).</param>
        /// <param name="createdBy">createdBy (required).</param>
        /// <param name="createdAt">createdAt (required).</param>
        /// <param name="updatedAt">updatedAt (required).</param>
        public ResponseGroup(Guid groupId = default(Guid), string name = default(string), string description = default(string), bool open = default(bool), bool isTraQGroup = default(bool), List<Guid> members = default(List<Guid>), List<Guid> admins = default(List<Guid>), Guid createdBy = default(Guid), string createdAt = default(string), string updatedAt = default(string))
        {
            this.GroupId = groupId;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for ResponseGroup and cannot be null");
            }
            this.Name = name;
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new ArgumentNullException("description is a required property for ResponseGroup and cannot be null");
            }
            this.Description = description;
            this.Open = open;
            this.IsTraQGroup = isTraQGroup;
            // to ensure "members" is required (not null)
            if (members == null)
            {
                throw new ArgumentNullException("members is a required property for ResponseGroup and cannot be null");
            }
            this.Members = members;
            // to ensure "admins" is required (not null)
            if (admins == null)
            {
                throw new ArgumentNullException("admins is a required property for ResponseGroup and cannot be null");
            }
            this.Admins = admins;
            this.CreatedBy = createdBy;
            // to ensure "createdAt" is required (not null)
            if (createdAt == null)
            {
                throw new ArgumentNullException("createdAt is a required property for ResponseGroup and cannot be null");
            }
            this.CreatedAt = createdAt;
            // to ensure "updatedAt" is required (not null)
            if (updatedAt == null)
            {
                throw new ArgumentNullException("updatedAt is a required property for ResponseGroup and cannot be null");
            }
            this.UpdatedAt = updatedAt;
        }

        /// <summary>
        /// Gets or Sets GroupId
        /// </summary>
        [DataMember(Name = "groupId", IsRequired = true, EmitDefaultValue = true)]
        public Guid GroupId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        /*
        <example>room</example>
        */
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        /*
        <example>Sysad班room開発グループ</example>
        */
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Open
        /// </summary>
        [DataMember(Name = "open", IsRequired = true, EmitDefaultValue = true)]
        public bool Open { get; set; }

        /// <summary>
        /// Gets or Sets IsTraQGroup
        /// </summary>
        /*
        <example>false</example>
        */
        [DataMember(Name = "isTraQGroup", IsRequired = true, EmitDefaultValue = true)]
        public bool IsTraQGroup { get; set; }

        /// <summary>
        /// グループのメンバー
        /// </summary>
        /// <value>グループのメンバー</value>
        [DataMember(Name = "members", IsRequired = true, EmitDefaultValue = true)]
        public List<Guid> Members { get; set; }

        /// <summary>
        /// 編集権を持つユーザー
        /// </summary>
        /// <value>編集権を持つユーザー</value>
        [DataMember(Name = "admins", IsRequired = true, EmitDefaultValue = true)]
        public List<Guid> Admins { get; set; }

        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name = "createdBy", IsRequired = true, EmitDefaultValue = true)]
        public Guid CreatedBy { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        /*
        <example>2006-01-02T15:04:05Z</example>
        */
        [DataMember(Name = "createdAt", IsRequired = true, EmitDefaultValue = true)]
        public string CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        /*
        <example>2006-01-02T15:04:05Z</example>
        */
        [DataMember(Name = "updatedAt", IsRequired = true, EmitDefaultValue = true)]
        public string UpdatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ResponseGroup {\n");
            sb.Append("  GroupId: ").Append(GroupId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Open: ").Append(Open).Append("\n");
            sb.Append("  IsTraQGroup: ").Append(IsTraQGroup).Append("\n");
            sb.Append("  Members: ").Append(Members).Append("\n");
            sb.Append("  Admins: ").Append(Admins).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
