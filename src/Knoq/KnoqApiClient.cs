// <auto-generated/>
#pragma warning disable CS0618
using Knoq.Activity;
using Knoq.AuthParams;
using Knoq.Callback;
using Knoq.Events;
using Knoq.Groups;
using Knoq.Ical;
using Knoq.Rooms;
using Knoq.Tags;
using Knoq.Users;
using Knoq.VersionNamespace;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions;
using Microsoft.Kiota.Serialization.Form;
using Microsoft.Kiota.Serialization.Json;
using Microsoft.Kiota.Serialization.Multipart;
using Microsoft.Kiota.Serialization.Text;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System;
namespace Knoq
{
    /// <summary>
    /// The main entry point of the SDK, exposes the configuration and the fluent API.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class KnoqApiClient : BaseRequestBuilder
    {
        /// <summary>The activity property</summary>
        public global::Knoq.Activity.ActivityRequestBuilder Activity
        {
            get => new global::Knoq.Activity.ActivityRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The authParams property</summary>
        public global::Knoq.AuthParams.AuthParamsRequestBuilder AuthParams
        {
            get => new global::Knoq.AuthParams.AuthParamsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The callback property</summary>
        public global::Knoq.Callback.CallbackRequestBuilder Callback
        {
            get => new global::Knoq.Callback.CallbackRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The events property</summary>
        public global::Knoq.Events.EventsRequestBuilder Events
        {
            get => new global::Knoq.Events.EventsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The groups property</summary>
        public global::Knoq.Groups.GroupsRequestBuilder Groups
        {
            get => new global::Knoq.Groups.GroupsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The ical property</summary>
        public global::Knoq.Ical.IcalRequestBuilder Ical
        {
            get => new global::Knoq.Ical.IcalRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The rooms property</summary>
        public global::Knoq.Rooms.RoomsRequestBuilder Rooms
        {
            get => new global::Knoq.Rooms.RoomsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The tags property</summary>
        public global::Knoq.Tags.TagsRequestBuilder Tags
        {
            get => new global::Knoq.Tags.TagsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The users property</summary>
        public global::Knoq.Users.UsersRequestBuilder Users
        {
            get => new global::Knoq.Users.UsersRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The version property</summary>
        public global::Knoq.VersionNamespace.VersionRequestBuilder Version
        {
            get => new global::Knoq.VersionNamespace.VersionRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Knoq.KnoqApiClient"/> and sets the default values.
        /// </summary>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public KnoqApiClient(IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}", new Dictionary<string, object>())
        {
            ApiClientBuilder.RegisterDefaultSerializer<JsonSerializationWriterFactory>();
            ApiClientBuilder.RegisterDefaultSerializer<TextSerializationWriterFactory>();
            ApiClientBuilder.RegisterDefaultSerializer<FormSerializationWriterFactory>();
            ApiClientBuilder.RegisterDefaultSerializer<MultipartSerializationWriterFactory>();
            ApiClientBuilder.RegisterDefaultDeserializer<JsonParseNodeFactory>();
            ApiClientBuilder.RegisterDefaultDeserializer<TextParseNodeFactory>();
            ApiClientBuilder.RegisterDefaultDeserializer<FormParseNodeFactory>();
            if (string.IsNullOrEmpty(RequestAdapter.BaseUrl))
            {
                RequestAdapter.BaseUrl = "http://knoq.trap.jp/api";
            }
            PathParameters.TryAdd("baseurl", RequestAdapter.BaseUrl);
        }
    }
}
#pragma warning restore CS0618
